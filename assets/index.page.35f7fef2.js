import{j as e}from"./renderer/_default.page.client.jsx.722d8811.js";const i={title:"Lab 4"};function r(t){const s=Object.assign({nav:"nav",ol:"ol",li:"li",a:"a",main:"main",h1:"h1",span:"span",h2:"h2",p:"p",img:"img",del:"del",em:"em",h3:"h3",code:"code",h4:"h4",div:"div",blockquote:"blockquote",strong:"strong",ul:"ul",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},t.components);return e.exports.jsxs(e.exports.Fragment,{children:[e.exports.jsx(s.nav,{className:"toc",children:e.exports.jsx(s.ol,{className:"toc-level toc-level-1",children:e.exports.jsxs(s.li,{className:"toc-item toc-item-h1",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h1",href:"#lab-8-trimeshez-lab",children:"Lab 8: Trimeshez Lab"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-2",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#intro",children:"Intro"})}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#representing-objects-via-trimeshes",children:"Representing Objects via Trimeshes"}),e.exports.jsx(s.ol,{className:"toc-level toc-level-3",children:e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#level-of-detail-tessellation-level",children:"Level-of-Detail (Tessellation Level)"})})})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#trimeshes-in-code",children:"Trimeshes In Code"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsxs(s.li,{className:"toc-item toc-item-h3",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#a-single-triangle",children:"A Single Triangle"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-4",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#per-face-normals",children:"Per-Face Normals"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#per-vertex-normals",children:"Per-Vertex Normals"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#why-do-normals-and-winding-order-matter",children:"Why Do Normals And Winding Order Matter?"})})]})]}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#multiple-triangles-or-a-trimesh",children:"Multiple Triangles, Or, A Trimesh"})})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#creating-your-own-trimeshes",children:"Creating Your Own Trimeshes"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#our-stencil-code",children:"Our Stencil Code"})}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h3",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#creating-a-cube",children:"Creating a Cube"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-4",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#creating-a-tile",children:"Creating a Tile"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#creating-a-face-w-tessellation",children:"Creating a Face, w/ Tessellation"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#bringing-it-all-together-creating-a-cube",children:"Bringing It All Together: Creating a Cube"})})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h3",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#creating-a-sphere",children:"Creating a Sphere"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-4",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#spherical-coordinates-make-things-easier",children:"Spherical Coordinates Make Things Easier"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#creating-a-wedge",children:"Creating a Wedge"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#creating-a-sphere-1",children:"Creating a Sphere"})})]})]})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#end",children:"End"}),e.exports.jsx(s.ol,{className:"toc-level toc-level-3",children:e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#food-for-thought",children:"Food For Thought"})})})]})]})]})})}),e.exports.jsxs(s.main,{children:[`
`,`
`,e.exports.jsxs(s.h1,{id:"lab-8-trimeshez-lab",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#lab-8-trimeshez-lab",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Lab 8: Trimeshez Lab"]}),`
`,e.exports.jsxs(s.h2,{id:"intro",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#intro",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Intro"]}),`
`,e.exports.jsx(s.p,{children:"One of the fundamental applications of computer graphics is to display 3D objects and scenes. Recall the Realtime pipeline from lecture below."}),`
`,e.exports.jsx(s.p,{children:e.exports.jsx(s.img,{src:"url",alt:"realtime pipeline hightlight input data"})}),`
`,e.exports.jsx(s.p,{children:"The first part of the pipeline is the input data where we provide vertex positions, normals, triangle connectivity information, etc. for trimeshes which are collections of triangles. We will use trimeshes to model 3D objects and scenes in this lab and in the Realtime projects."}),`
`,e.exports.jsx(s.p,{children:"In the Realtime projects, you will be displaying scenes made up of the following 3D shapes: Cube, Cone, Cylinder, and Sphere. In this lab, you will be implementing two of the four shapes, Cube and Sphere. In the first Realtime Project, you will implement the remaining shapes, Cylinder and Cone. Throughout the rest of this handout there will be a couple of suggestions that we highly encourage you to consider in your design."}),`
`,e.exports.jsx(s.p,{children:"By the end of this lab, you will:"}),`
`,e.exports.jsxs(s.ol,{children:[`
`,e.exports.jsx(s.li,{children:"Learn to use trimeshes as a way to (approximately) represent an object ('s surface)"}),`
`,e.exports.jsx(s.li,{children:"Implement a Cube and a Sphere"}),`
`]}),`
`,e.exports.jsxs(s.h2,{id:"representing-objects-via-trimeshes",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#representing-objects-via-trimeshes",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Representing Objects via Trimeshes"]}),`
`,e.exports.jsxs(s.p,{children:["We can represent any ",e.exports.jsx(s.del,{children:e.exports.jsx(s.em,{children:"surface"})})," as a triangle mesh. Conveniently, most objects in the world are defined by a surface. These objects are usually a closed surface bounding a volume like a primitive 3D shape (for example, a Cube)."]}),`
`,e.exports.jsx(s.p,{children:"![gif of exploding trimesh][url]"}),`
`,e.exports.jsxs(s.p,{children:["With that said, some things cannot be so easily represented by a trimesh. For example, you don't typically think about fog as a surface, so it doesn't make sense to represent it as a trimesh. There are other ways to represent objects like fog, such as volumetric rendering. If you're interested, you can read more about volumetric rendering ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Volume_rendering",children:"here"}),"."]}),`
`,e.exports.jsxs(s.h3,{id:"level-of-detail-tessellation-level",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#level-of-detail-tessellation-level",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Level-of-Detail (Tessellation Level)"]}),`
`,e.exports.jsxs(s.p,{children:["Recall from the Ray projects that you represented the 3D shapes as implicit equations. This technically allows for infinite resolution (up to floating point limits). On the other hand, trimeshes are approximations. The more triangles used to represent a surface, the more realistic the rendering, but the more computation is required. The number of triangles used, and thus the level-of-detail of the 3D shape, is called the ",e.exports.jsx(s.del,{children:e.exports.jsx(s.em,{children:"tessellation level"})}),"."]}),`
`,e.exports.jsxs(s.p,{children:["~[increasing tessellation image][",e.exports.jsx(s.a,{href:"https://i.stack.imgur.com/ut6do.jpg",children:"https://i.stack.imgur.com/ut6do.jpg"}),"]"]}),`
`,e.exports.jsxs(s.h2,{id:"trimeshes-in-code",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#trimeshes-in-code",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Trimeshes In Code"]}),`
`,e.exports.jsx(s.p,{children:"Trimeshes are composed of triangles (duh) which are then composed of vertex positions (for rendering the triangle) and normals (for lighting the triangle)."}),`
`,e.exports.jsxs(s.h3,{id:"a-single-triangle",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#a-single-triangle",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"A Single Triangle"]}),`
`,e.exports.jsxs(s.p,{children:["As you can probably guess, we render a triangle from a triplet of vertex positions in ",e.exports.jsx(s.code,{children:"std::vector<float> vertexPositions"}),". It's important to note, in our case, the winding order of the vertices is ",e.exports.jsx(s.del,{children:e.exports.jsx(s.em,{children:"counter-clockwise"})}),"."]}),`
`,e.exports.jsx(s.p,{children:"![vertex positions and triangles][url]"}),`
`,e.exports.jsxs(s.h4,{id:"per-face-normals",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#per-face-normals",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Per-Face Normals"]}),`
`,e.exports.jsx(s.p,{children:"If we want every point on the triangle to have the same normal, we can use per-face normals. Since we have 3 vertices, we can form two vectors to calculate the normal by taking the cross product of those two vectors."}),`
`,e.exports.jsxs(s.p,{children:["![per face normal][",e.exports.jsx(s.a,{href:"https://i.stack.imgur.com/wzz1l.jpg",children:"https://i.stack.imgur.com/wzz1l.jpg"}),"]"]}),`
`,e.exports.jsxs(s.h4,{id:"per-vertex-normals",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#per-vertex-normals",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Per-Vertex Normals"]}),`
`,e.exports.jsx(s.p,{children:"What if we want every triangle vertex to have a different normal? Then we use per-vertex normals. An example of a situation where we would want per-vertex normals is for curved surfaces."}),`
`,e.exports.jsxs(s.p,{children:["![curved surface normals][",e.exports.jsx(s.a,{href:"https://encrypted-tbn0.gstatic.com/images?q=tbn",children:"https://encrypted-tbn0.gstatic.com/images?q=tbn"}),e.exports.jsx(s.div,{}),`&usqp=cau]
![cone with normals at tip][url]`]}),`
`,e.exports.jsxs(s.p,{children:["For our purposes, we will be using per-vertex normals. Each triangle is represented by a sextuplet of vertex positions and normals in ",e.exports.jsx(s.code,{children:"std::vector<float> vertexData"})," (we use ",e.exports.jsx(s.code,{children:"vertexData"})," since it's shorter than ",e.exports.jsx(s.code,{children:"vertexPositionsAndNormals"}),"). Again, the winding order of vertices and normals is ",e.exports.jsx(s.del,{children:e.exports.jsx(s.em,{children:"counter-clockwise"})}),"."]}),`
`,e.exports.jsxs(s.h4,{id:"why-do-normals-and-winding-order-matter",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#why-do-normals-and-winding-order-matter",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Why Do Normals And Winding Order Matter?"]}),`
`,e.exports.jsx(s.p,{children:"As you've already seen in the Ray projects and in Lab 06 Lighting, you need normals to properly shade objects."}),`
`,e.exports.jsx(s.p,{children:"In this lab and in the Realtime projects, you need the correct winding order of positions and normals to properly render the objects. This is because of backface culling. Backface culling is a rendering technique that determines which side of the triangle is visible."}),`
`,e.exports.jsx(s.p,{children:"![backface culling gif][url]"}),`
`,e.exports.jsxs(s.p,{children:["You can read more about backface culling ",e.exports.jsx(s.a,{href:"https://www.easytechjunkie.com/what-is-back-face-culling.htm",children:"here"}),"."]}),`
`,e.exports.jsxs(s.h3,{id:"multiple-triangles-or-a-trimesh",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#multiple-triangles-or-a-trimesh",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Multiple Triangles, Or, A Trimesh"]}),`
`,e.exports.jsxs(s.p,{children:["If you combine multiple triangles together, you'll end up with a trimesh! Recall that tessellation levels determines the number of triangles used in the trimesh. How do we represent a collection of triangles? Well, we've already seen a possible solution: just append the additional triangle information onto the back of the list. In our case, this list is still represented as ",e.exports.jsx(s.code,{children:"std::vector<float> vertexData"}),"."]}),`
`,e.exports.jsx(s.p,{children:"![cube vertex data img][url]"}),`
`,e.exports.jsxs(s.blockquote,{children:[`
`,e.exports.jsxs(s.p,{children:["Notice that ",e.exports.jsx(s.code,{children:"vertexData"})," can contain repeats since the vertex/normal will appear in the same place!"]}),`
`]}),`
`,e.exports.jsx("details",{children:e.exports.jsxs(s.p,{children:[e.exports.jsx("summary",{children:" Extra: Hand on...surely there's a more efficient way to represent a triangle mesh "}),`
Yes, of course there is a more efficient way! Look at all the repeated vertex data :( Instead of triangle meshes,
we can use `,e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Triangle_strip",children:"triangle strips"}),", ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Triangle_fan",children:"triangle fans"}),`,
etc.`]})}),`
`,e.exports.jsxs(s.h2,{id:"creating-your-own-trimeshes",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#creating-your-own-trimeshes",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Creating Your Own Trimeshes"]}),`
`,e.exports.jsx(s.p,{children:"Well, now we know the most important things:"}),`
`,e.exports.jsxs(s.ol,{children:[`
`,e.exports.jsx(s.li,{children:"A shape can be represented as a variable number of triangles, depending on the level of detail"}),`
`,e.exports.jsx(s.li,{children:"A collection of triangles can be represented via a list of positions and normals"}),`
`]}),`
`,e.exports.jsx(s.p,{children:"Now, all that remains is to make our own implementation. At a high level, we are going to take a shape, a level of detail, and spit out the list!"}),`
`,e.exports.jsxs(s.h3,{id:"our-stencil-code",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#our-stencil-code",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Our Stencil Code"]}),`
`,e.exports.jsxs(s.p,{children:["Take a look at our stencil code. The only files you need to concern yourself with are the files in the shapes folder. Notice that ",e.exports.jsx(s.code,{children:"Triangle"}),", ",e.exports.jsx(s.code,{children:"Cube"}),", ",e.exports.jsx(s.code,{children:"Sphere"}),", ",e.exports.jsx(s.code,{children:"Cone"}),", and ",e.exports.jsx(s.code,{children:"Cylinder"})," inherit from ",e.exports.jsx(s.code,{children:"OpenGLShape"}),". For this lab, you'll only be working with ",e.exports.jsx(s.code,{children:"Triangle"}),", ",e.exports.jsx(s.code,{children:"Cube"}),", and ",e.exports.jsx(s.code,{children:"Sphere"}),". Check the comments within the code for how exactly to edit each shape."]}),`
`,e.exports.jsxs(s.p,{children:["For our purposes, ",e.exports.jsx(s.strong,{children:"each shape is centered at the origin and has a radius of 0.5. In other words, they lie in the range [-0.5, 0.5] on all axes."})]}),`
`,e.exports.jsx(s.p,{children:"You'll notice on the left side of the UI, there are toggles to change the shape and sliders to change parameter 1 and parameter 2. The parameters control the tessellation level of each shape. We'll go into detail about what specifically the parameters do later in the handout."}),`
`,e.exports.jsxs(s.p,{children:["Most importantly, notice that each shape inherits ",e.exports.jsx(s.code,{children:"std::vector<float> m_vertexData"})," from ",e.exports.jsx(s.code,{children:"OpenGLShape"}),". You'll be editing this list with the positions and normals for each shape. ",e.exports.jsxs(s.strong,{children:["Note that ",e.exports.jsx(s.code,{children:"m_vertexData"})," alternates between vertex positions and normals!"]})]}),`
`,e.exports.jsx(s.p,{children:"![m_vertexData][url]"}),`
`,e.exports.jsxs(s.p,{children:["On the right side of the UI, you will eventually see the shapes generated from ",e.exports.jsx(s.code,{children:"m_vertexData"}),". You won't see anything right now because ",e.exports.jsx(s.code,{children:"m_vertexData"})," is empty."]}),`
`,e.exports.jsxs(s.div,{className:"task-callout",children:[e.exports.jsx(s.p,{children:e.exports.jsx(s.strong,{children:"Task 1"})}),e.exports.jsxs(s.p,{children:["In the ",e.exports.jsx(s.code,{children:"Triangle"})," class, fill out the ",e.exports.jsx(s.code,{children:"setVertexData()"})," function stub."]}),e.exports.jsx(s.p,{children:"Use the following coordinate points:"}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsx(s.li,{children:"(-0.5, -0.5, 0)"}),`
`,e.exports.jsx(s.li,{children:"(0.5, -0.5, 0)"}),`
`,e.exports.jsx(s.li,{children:"(-0.5, 0.5, 0)"}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:"Your triangle should look like this:"}),`
`,e.exports.jsx(s.p,{children:"![triangle gif][url]"}),`
`,e.exports.jsx(s.p,{children:"Notice that if you spin the triangle around, it'll disappear. This is backface culling!"}),`
`,e.exports.jsxs(s.h3,{id:"creating-a-cube",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#creating-a-cube",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Creating a Cube"]}),`
`,e.exports.jsx(s.p,{children:"Now that you've rendered a triangle, it's time to render a Cube :)"}),`
`,e.exports.jsxs(s.h4,{id:"creating-a-tile",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#creating-a-tile",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Creating a Tile"]}),`
`,e.exports.jsxs(s.div,{className:"task-callout",children:[e.exports.jsx(s.p,{children:e.exports.jsx(s.strong,{children:"Task 2"})}),e.exports.jsxs(s.p,{children:["In the ",e.exports.jsx(s.code,{children:"Cube"})," class, fill out the ",e.exports.jsx(s.code,{children:"makeTile()"})," function stub."]}),e.exports.jsxs(s.p,{children:["Uncomment the ",e.exports.jsx(s.code,{children:"makeTile()"})," function call in ",e.exports.jsx(s.code,{children:"setVertexData()"}),". Note that you'll use this function for the next task."]})]}),`
`,e.exports.jsx(s.p,{children:"Your tile should look like this:"}),`
`,e.exports.jsx(s.p,{children:"![tile gif][url]"}),`
`,e.exports.jsxs(s.h4,{id:"creating-a-face-w-tessellation",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#creating-a-face-w-tessellation",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Creating a Face, w/ Tessellation"]}),`
`,e.exports.jsx(s.p,{children:"Now, that you have your tile, you can create one face of the Cube! Notice how parameter 1 controls the number of tiles in each row and column:"}),`
`,e.exports.jsx(s.p,{children:"![shape tessellation img][url]"}),`
`,e.exports.jsxs(s.div,{className:"task-callout",children:[e.exports.jsx(s.p,{children:e.exports.jsx(s.strong,{children:"Task 3"})}),e.exports.jsxs(s.p,{children:["In the ",e.exports.jsx(s.code,{children:"Cube"})," class, fill out the ",e.exports.jsx(s.code,{children:"makeFace()"})," function stub."]}),e.exports.jsxs(s.p,{children:["Comment out the ",e.exports.jsx(s.code,{children:"makeTile()"})," function call in ",e.exports.jsx(s.code,{children:"setVertexData()"})," and uncomment the ",e.exports.jsx(s.code,{children:"makeFace()"})," function call. This will render the positive z face of the Cube. The face should tessellate differently depending on parameter 1."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:["Use the ",e.exports.jsx(s.code,{children:"makeTile()"})," function you wrote in the previous task in ",e.exports.jsx(s.code,{children:"makeFace()"}),"."]}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:"Your face should look like this:"}),`
`,e.exports.jsx(s.p,{children:"![face tessellation gif][url]"}),`
`,e.exports.jsxs(s.h4,{id:"bringing-it-all-together-creating-a-cube",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#bringing-it-all-together-creating-a-cube",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Bringing It All Together: Creating a Cube"]}),`
`,e.exports.jsxs(s.div,{className:"task-callout",children:[e.exports.jsx(s.p,{children:e.exports.jsx(s.strong,{children:"Task 4"})}),e.exports.jsxs(s.p,{children:["Implement all 6 sides of your Cube using the ",e.exports.jsx(s.code,{children:"makeFace()"})," function you implemented."]}),e.exports.jsxs(s.p,{children:["You should call ",e.exports.jsx(s.code,{children:"makeFace()"})," in ",e.exports.jsx(s.code,{children:"setVertexData()"}),"."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsx(s.li,{children:"It might be helpful to draw a diagram of the Cube to figure out the positions of all its corners!"}),`
`,e.exports.jsx(s.li,{children:"Remember that the Cube has a radius of 0.5 and lies in the bounds [-0.5, 0.5] on all axes."}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:`Your Cube should look like this:
![cube gif][url]`}),`
`,e.exports.jsxs(s.h3,{id:"creating-a-sphere",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#creating-a-sphere",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Creating a Sphere"]}),`
`,e.exports.jsx(s.p,{children:"Yay! Congratulations on making your Cube! It's time to make a Sphere."}),`
`,e.exports.jsx(s.p,{children:`![sphere parameter gif][url]
![exploding wedges gif][url]`}),`
`,e.exports.jsx(s.p,{children:"We can think of the Sphere like an orange. Oranges are made up of wedges and each wedge is made up segments. We can build an orange (aka a sphere) by procedurally generating a collection of orange wedges."}),`
`,e.exports.jsx(s.p,{children:"As shown above, the shape parameters for Sphere are slightly different than Cube. The first parameter controls the number of 'segments' (like latitude), and the second parameter controls the number of 'wedges' (like longitude)."}),`
`,e.exports.jsx(s.p,{children:"Like Cube, the Sphere is centered at the origin and has a radius of 0.5, so it lies in the bounds [-0.5, 0.5] on all axes."}),`
`,e.exports.jsxs(s.h4,{id:"spherical-coordinates-make-things-easier",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#spherical-coordinates-make-things-easier",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Spherical Coordinates Make Things Easier"]}),`
`,e.exports.jsx(s.p,{children:"We can represent this 'orange wedge and segment' idea using spherical coordinates. In terms of spherical coordinates, parameter 1 controls \u{1D719} and parameter 2 controls \u{1D703}."}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Refresher: The Spherical Coordinate System"}),e.exports.jsxs(s.p,{children:["Remember polar coordinates (",e.exports.jsx(s.em,{children:"r"}),", \u{1D703}) from high school geometry? Spherical coordinates (",e.exports.jsx(s.em,{children:"r"}),", \u{1D703}, \u{1D719}) are like polar coordinates but in 3D! The spherical coordinate system specifies a 3D point in space using (",e.exports.jsx(s.em,{children:"r"}),", \u{1D703}, \u{1D719}). for more details, read this ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Spherical_coordinate_system",children:"Wikipedia article on the Spherical Coordinate System"})," :)"]})]}),`
`,e.exports.jsxs(s.table,{children:[e.exports.jsx(s.thead,{children:e.exports.jsxs(s.tr,{children:[e.exports.jsx(s.th,{align:"center",children:"Coordinate"}),e.exports.jsx(s.th,{align:"center",children:"Diagram"})]})}),e.exports.jsxs(s.tbody,{children:[e.exports.jsxs(s.tr,{children:[e.exports.jsxs(s.td,{align:"center",children:[e.exports.jsx(s.em,{children:"r"}),": the radial distance from the origin. For sphere, ",e.exports.jsx(s.code,{children:"r=0.5"})]}),e.exports.jsx(s.td,{align:"center",children:e.exports.jsx("img",{src:"handout_images/amog-us-among-us.gif",width:"300"})})]}),e.exports.jsxs(s.tr,{children:[e.exports.jsx(s.td,{align:"center",children:"\u{1D703}: the polar angle. For sphere, this is in radians."}),e.exports.jsx(s.td,{align:"center",children:e.exports.jsx("img",{src:"handout_images/amog-us-among-us.gif",width:"300"})})]}),e.exports.jsxs(s.tr,{children:[e.exports.jsx(s.td,{align:"center",children:"\u{1D719}: the azimuthal angle. For sphere, this is in radians."}),e.exports.jsx(s.td,{align:"center",children:e.exports.jsx("img",{src:"handout_images/amog-us-among-us.gif",width:"300"})})]})]})]}),`
`,e.exports.jsxs(s.h4,{id:"creating-a-wedge",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#creating-a-wedge",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Creating a Wedge"]}),`
`,e.exports.jsxs(s.div,{className:"task-callout",children:[e.exports.jsx(s.p,{children:e.exports.jsx(s.strong,{children:"Task 5"})}),e.exports.jsxs(s.p,{children:["Implement the ",e.exports.jsx(s.code,{children:"makeTile()"})," function stub in the ",e.exports.jsx(s.code,{children:"Sphere"})," Class."]}),e.exports.jsxs(s.p,{children:["This function should look very similar to the ",e.exports.jsx(s.code,{children:"makeTile()"})," function in the ",e.exports.jsx(s.code,{children:"Cube"})," class."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsx(s.li,{children:"Note that the normals are calculated differently from those in Cube."}),`
`,e.exports.jsx(s.li,{children:"The normals for Sphere are per-vertex normals."}),`
`,e.exports.jsx(s.li,{children:"Refer to the diagram for what your normals should look like."}),`
`]}),e.exports.jsx(s.p,{children:"![sphere normals diagram][url]"})]}),`
`,e.exports.jsxs(s.div,{className:"task-callout",children:[e.exports.jsx(s.p,{children:e.exports.jsx(s.strong,{children:"Task 6"})}),e.exports.jsxs(s.p,{children:["Implement the ",e.exports.jsx(s.code,{children:"makeWedge()"})," function stub in the ",e.exports.jsx(s.code,{children:"Sphere"})," Class."]}),e.exports.jsxs(s.p,{children:["Uncomment the ",e.exports.jsx(s.code,{children:"makeWedge()"})," function call in ",e.exports.jsx(s.code,{children:"setVertexData()"}),"."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:["Use the ",e.exports.jsx(s.code,{children:"makeTile()"})," function from task 5."]}),`
`,e.exports.jsx(s.li,{children:"Remember that we are making a wedge, so you need to pay attention to parameter 1 and \u{1D719}."}),`
`,e.exports.jsx(s.li,{children:"Remember that everything is in radians!"}),`
`,e.exports.jsxs(s.li,{children:["You may find these function calls helpful:",`
`,e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"glm::radians"})}),`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"glm::sin"})}),`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"glm::cos"})}),`
`]}),`
`]}),`
`,e.exports.jsxs(s.li,{children:["You may also find these equations useful:",`
`,e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"x = r * sin(\u{1D703}) * cos(\u{1D719})"})}),`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"y = r * sin(\u{1D703}) * sin(\u{1D719})"})}),`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.code,{children:"z = r * cos(\u{1D703})"})}),`
`]}),`
`]}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:"Your wedge should look like this:"}),`
`,e.exports.jsx(s.p,{children:"![wedge gif][url]"}),`
`,e.exports.jsxs(s.h4,{id:"creating-a-sphere-1",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#creating-a-sphere-1",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Creating a Sphere"]}),`
`,e.exports.jsx(s.div,{className:"task-callout",children:e.exports.jsx(s.p,{children:e.exports.jsx(s.strong,{children:"Task 7"})})}),`
`,e.exports.jsxs(s.p,{children:[`| :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| Implement the `,e.exports.jsx(s.code,{children:"makeOrange()"})," function stub in the ",e.exports.jsx(s.code,{children:"Sphere"}),` Class. |
| Comment out the `,e.exports.jsx(s.code,{children:"makeWedge()"})," function call in ",e.exports.jsx(s.code,{children:"setVertexData()"})," and uncomment the ",e.exports.jsx(s.code,{children:"makeOrange()"})," function call. ",e.exports.jsxs("ul",{children:[e.exports.jsx("li",{children:"Remember that everything is in radians!"}),e.exports.jsx("li",{children:"Remember that we are making multiple wedges (aka a Sphere), so you need to pay attention to parameter 2 and \u{1D703}."})]})," |"]}),`
`,e.exports.jsx(s.p,{children:"Your sphere should look like this:"}),`
`,e.exports.jsx(s.p,{children:"![sphere gif][url]"}),`
`,e.exports.jsxs(s.h2,{id:"end",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#end",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"End"]}),`
`,e.exports.jsx(s.p,{children:"Now you're ready to show your work to a TA and get checked off! Congrats on finishing the Trimeshez lab."}),`
`,e.exports.jsxs(s.h3,{id:"food-for-thought",children:[e.exports.jsx(s.a,{"aria-hidden":"true",tabIndex:"-1",href:"#food-for-thought",children:e.exports.jsx(s.span,{className:"icon icon-link"})}),"Food For Thought"]}),`
`,e.exports.jsxs(s.p,{children:["Next week, you'll be learning how to use OpenGL to render triangle meshes. OpenGL uses VBOs (vertex buffer objects) which store a list of vertices similar to ",e.exports.jsx(s.code,{children:"m_vertexData"})," in this lab. You'll learn more about this next week, but we just wanted to give you a brief intro. Good luck!"]})]})]})}function o(t={}){const{wrapper:s}=t.components||{};return s?e.exports.jsx(s,Object.assign({},t,{children:e.exports.jsx(r,t)})):r(t)}export{o as default,i as documentProps};
