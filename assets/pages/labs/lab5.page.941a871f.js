import{j as e}from"../../chunk-903e764a.js";import{I as a}from"../../chunk-30f40460.js";import{M as r}from"../../chunk-b2e2a089.js";const c={title:"Lab 5"};function n(t){const s=Object.assign({nav:"nav",ol:"ol",li:"li",a:"a",main:"main",h1:"h1",p:"p",h2:"h2",code:"code",strong:"strong",div:"div",h3:"h3",pre:"pre",span:"span",em:"em",h4:"h4"},t.components);return e.exports.jsxs(e.exports.Fragment,{children:[e.exports.jsx(s.nav,{className:"toc",children:e.exports.jsx(s.ol,{className:"toc-level toc-level-1",children:e.exports.jsxs(s.li,{className:"toc-item toc-item-h1",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h1",href:"#lab-5-parsing",children:"Lab 5: Parsing"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-2",children:[e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#introduction",children:"Introduction"}),e.exports.jsx(s.ol,{className:"toc-level toc-level-3",children:e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#scene-data-vrs-render-data",children:"Scene Data vrs. Render Data"})})})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#scene-data",children:"Scene Data"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#global-data",children:"Global Data"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#lights",children:"Lights"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#camera",children:"Camera"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#primitives",children:"Primitives"})})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#transformation-graphs",children:"Transformation Graphs"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#transformations",children:"Transformations"})}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h3",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#transformation-graphs-1",children:"Transformation Graphs"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-4",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#a-simple-transformation-graph",children:"A Simple Transformation Graph"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#a-more-complex-transformation-graph",children:"A More Complex Transformation Graph"})})]})]})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#render-data",children:"Render Data"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsxs(s.li,{className:"toc-item toc-item-h3",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#implementing-cs123sceneloaderload",children:"Implementing CS123SceneLoader::load()"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-4",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#global-data-camera-data",children:"Global data Camera Data"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#lights-1",children:"Lights"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#read-the-matrix-of-the-root",children:"Read the matrix of the root"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#depth-first-search-recusively",children:"Depth-first search recusively"})})]})]}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#testing-scenes",children:"Testing scenes"})})]})]}),e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#optional-creating-your-own-3-d-scenes",children:"(Optional) Creating your own 3-d scenes"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#end",children:"End"})})]})]})})}),e.exports.jsxs(s.main,{children:[`
`,`
`,e.exports.jsx(s.h1,{id:"lab-5-parsing",children:e.exports.jsx(s.a,{href:"#lab-5-parsing",children:"Lab 5: Parsing"})}),`
`,e.exports.jsx(s.p,{children:e.exports.jsx(s.a,{href:"https://google.com",children:"GitHub Classroom assignment"})}),`
`,e.exports.jsx(s.h2,{id:"introduction",children:e.exports.jsx(s.a,{href:"#introduction",children:"Introduction"})}),`
`,e.exports.jsxs(s.p,{children:["In this lab, you will learn how to work with ",e.exports.jsx(s.code,{children:"SceneData"})," to represent a 3d scene. You will then write code that turns ",e.exports.jsx(s.code,{children:"SceneData"})," into ",e.exports.jsx(s.code,{children:"RenderData"}),", a format that makes it easier to render an image from your scene. You will learn how lights, cameras and primitives are represented, as well as how to read ",e.exports.jsx(s.strong,{children:"transformation graphs"})," so that every object has the correct final size and position in the scene."]}),`
`,e.exports.jsx(s.div,{className:"warning-callout callout",children:e.exports.jsxs(s.p,{children:["You will need the code you\u2019ve written in this lab for the upcoming assignments, including the ",e.exports.jsx(s.a,{href:"/projects/ray",children:"Ray"})," and ",e.exports.jsx(s.a,{href:"/projects/realtime",children:"Realtime"})," projects!"]})}),`
`,e.exports.jsx(s.h3,{id:"scene-data-vrs-render-data",children:e.exports.jsx(s.a,{href:"#scene-data-vrs-render-data",children:"Scene Data vrs. Render Data"})}),`
`,e.exports.jsx(s.p,{children:"To visualize a compelling 3d scene, we need data about the lights, camera and primitives (which themselves include textures, surfaces and geometry). Yet, as you have probably seen in computer science, we can store data in more or less effective ways depending on our intended use!"}),`
`,e.exports.jsxs(s.p,{children:["In this case, when ",e.exports.jsx(s.strong,{children:"building a scene"}),", we will use a ",e.exports.jsx(s.strong,{children:"transformation graph"}),' to make it easy to keep track of (and change) the position and orientation of primitives. Because the transformation graph organizes our scene in a way that reflects how the objects are built together, we can think of this as a "ideal" representation of our scene, so we decided to call it simply ',e.exports.jsx(s.code,{children:"SceneData"}),"."]}),`
`,e.exports.jsxs(s.p,{children:["However, when ",e.exports.jsx(s.strong,{children:"rendering a scene"}),", we need the ",e.exports.jsx(s.strong,{children:"final transformation matrices"})," to quickly get the final position and orientation of the primitives. These matricies are also known as cummulative transformation matricies, or ",e.exports.jsx(s.code,{children:"ctm"})," for short, and are stored directly ",e.exports.jsx(s.strong,{children:"with the primitives in a list"}),'. We can think of this as a "render-optimized" representation of our scene, so we called it ',e.exports.jsx(s.code,{children:"RenderData"}),"."]}),`
`,e.exports.jsxs(s.p,{children:["See the drawing below. Your goal is to tranform ",e.exports.jsx(s.code,{children:"SceneData"})," to ",e.exports.jsx(s.code,{children:"RenderData"}),". Don't worry if you don't understand all the elements in the image, they'll be covered in this lab!"]}),`
`,e.exports.jsx(a,{images:[{src:"/labs/lab5/SceneVrsRender.png",alt:"TODO"}],figNumber:1,figureCaption:"Transforming SceneData into RenderData"}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Advanced: Why do we use an Array to render primitives?"}),e.exports.jsx(s.p,{children:"If you have started Ray 1, you might have noticed that one of the reasons Ray Tracing is so computationally expensive is because we need to check ray-primitive intersections, particularly when there are many primitives in the scene to check!"}),e.exports.jsxs(s.p,{children:["Using a list to iterate through the primitives is a simple way of doing this and sufficient for the requirements of this course, but there isn't any reason this part of the ",e.exports.jsx(s.code,{children:"RenderData"})," ",e.exports.jsx(s.strong,{children:"has"})," to be a simple list. If you want to be fancy, there are more efficient ways of doing it (see accelerated data structures like Octee, BVH and KD-Tree covered in lectures)."]})]}),`
`,e.exports.jsx(s.h2,{id:"scene-data",children:e.exports.jsx(s.a,{href:"#scene-data",children:"Scene Data"})}),`
`,e.exports.jsxs(s.p,{children:["Take a look at ",e.exports.jsx(s.code,{children:"parser/SceneData.h"}),". In this file, you will find all the data structures you need to build a scene. This section will go over the conceptual aspects of the scene elements."]}),`
`,e.exports.jsx(s.h3,{id:"global-data",children:e.exports.jsx(s.a,{href:"#global-data",children:"Global Data"})}),`
`,e.exports.jsxs(s.p,{children:["First, take a look at ",e.exports.jsx(s.code,{children:"lines 16 - 22"})," in ",e.exports.jsx(s.code,{children:"SceneData.h"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"CS123SceneGlobalData"}),`  {
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-c",children:"// Scene global color coefficients"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," ka;  ",e.exports.jsx(s.span,{className:"pl-c",children:"// global ambient coefficient"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," kd;  ",e.exports.jsx(s.span,{className:"pl-c",children:"// global diffuse coefficient"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," ks;  ",e.exports.jsx(s.span,{className:"pl-c",children:"// global specular coefficient"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," kt;  ",e.exports.jsx(s.span,{className:"pl-c",children:"// global transparency coefficient"}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsx(s.p,{children:"This struct contains all the data relating to the entirety of the scene. In our case, it contains color coefficients that will be applied to the shading of every object in the scene. If you don't know exactly what these coefficents are, don't worry. For the purposes of this lab, you just need to know that each scene will contain global data which we will need to have when rendering it."}),`
`,e.exports.jsx(s.h3,{id:"lights",children:e.exports.jsx(s.a,{href:"#lights",children:"Lights"})}),`
`,e.exports.jsxs(s.p,{children:["Next, look at ",e.exports.jsx(s.code,{children:"lines 26 - 28"})," in ",e.exports.jsx(s.code,{children:"CS123SceneData.h"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"enum"})," ",e.exports.jsx(s.span,{className:"pl-k",children:"class"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"LightType"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line",children:`    LIGHT_POINT, LIGHT_DIRECTIONAL, LIGHT_SPOT, LIGHT_AREA
`}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:[`To simulate different light sources in the real world, we use four types of virtual lights: Point, Directional, Spot, and Area.
You will know which one of these types of lights it is by the value of the enum `,e.exports.jsx(s.code,{children:"LightType"}),"."]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"What are Enums?"}),e.exports.jsx(s.p,{children:"Enums, or enumerated types, are user-defined data types that can take on a finite set of values. The values are defined during declaration, as shown above. Since they are enumerated, each value of the enum has an associated integer value, which by default starts with 0 for the first value. You probably have encountered enums already in Python or Java, where the convention is also to write the values in uppercase."})]}),`
`,e.exports.jsxs(s.p,{children:["Now, look at ",e.exports.jsx(s.code,{children:"lines 31 - 46"})," in ",e.exports.jsx(s.code,{children:"CS123SceneData.h"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"CS123SceneLightData"}),` {
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"int"}),` id;
`]}),e.exports.jsx(s.span,{className:"code-line",children:`   LightType type;
`}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsx(s.span,{className:"code-line",children:`   CS123SceneColor color;
`}),e.exports.jsxs(s.span,{className:"code-line",children:["   glm::vec3 function;  ",e.exports.jsx(s.span,{className:"pl-c",children:"// Attenuation function"}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["   glm::vec4 pos;       ",e.exports.jsx(s.span,{className:"pl-c",children:"// Not applicable to directional lights"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   glm::vec4 dir;       ",e.exports.jsx(s.span,{className:"pl-c",children:"// Not applicable to point lights"}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," radius;        ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable to spot lights"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," penumbra;      ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable to spot lights"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," angle;         ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable to spot lights"}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," width, height; ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable to area lights"}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["Each light in our scene is represented with a struct that includes its ",e.exports.jsx(s.code,{children:"LightType"}),", its color, and other relevant information depending on the ",e.exports.jsx(s.code,{children:"LightType "}),"."]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"What is CS123SceneColor?"}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-c",children:"// Struct to store a RGBA color in floats [0,1]"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"using"}),` CS123SceneColor = glm::vec4;
`]})]})}),e.exports.jsx(s.p,{children:"You can look at lines 112 - 113 to see how color is represented. You should have already worked with with RGBA color in Brush and Filter."})]}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"Point lights"})," are an single point in space that emits light equally in all directions (~lightbulb). They don't need a direction vector."]}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"Directional lights"})," simulate light from a source that is extremely far away (e.g. the sun). Because of this, they don't have an attenuation function."]}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"Spot lights"})," emit light in a cone shape (~a flashlight). They need an angle and radius to describe the dimentions of the cone, a direction to know where the base of the cone points to, and a position. The penumbra is how much the light fades away along the edges of the cone."]}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"Area lights"})," are squares that emit light in all directions uniformly accross their surface."]}),`
`,e.exports.jsx(s.p,{children:e.exports.jsxs(s.em,{children:["Parts taken from ",e.exports.jsx(s.a,{href:"https://docs.unity3d.com/Manual/Lighting.html",children:"this article"})," where you can read more about types of light used in 3-d scenes."]})}),`
`,e.exports.jsx(s.h3,{id:"camera",children:e.exports.jsx(s.a,{href:"#camera",children:"Camera"})}),`
`,e.exports.jsxs(s.p,{children:["For the camera, take a look at ",e.exports.jsx(s.code,{children:"lines 50 - 60"})," in ",e.exports.jsx(s.code,{children:"CS123SceneData.h"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"CS123SceneCameraData"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line",children:`   glm::vec4 pos;
`}),e.exports.jsx(s.span,{className:"code-line",children:`   glm::vec4 look;
`}),e.exports.jsx(s.span,{className:"code-line",children:`   glm::vec4 up;
`}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"}),` heightAngle;
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["   ",e.exports.jsx(s.span,{className:"pl-k",children:"float"}),` aspectRatio;
`]}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsx(s.p,{children:"Look familiar? The camera is also just a struct with the relevant fields needed to describe its attributes! The position, look and up vectors of the camera are all described in world space (recall the discussion of world space/camera space from last week's transform's lab)."}),`
`,e.exports.jsx(s.h3,{id:"primitives",children:e.exports.jsx(s.a,{href:"#primitives",children:"Primitives"})}),`
`,e.exports.jsxs(s.p,{children:["Moving on to ",e.exports.jsx(s.code,{children:"lines 64 - 71"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"enum"})," ",e.exports.jsx(s.span,{className:"pl-k",children:"class"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"PrimitiveType"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line",children:`    PRIMITIVE_CUBE,
`}),e.exports.jsx(s.span,{className:"code-line",children:`    PRIMITIVE_CONE,
`}),e.exports.jsx(s.span,{className:"code-line",children:`    PRIMITIVE_CYLINDER,
`}),e.exports.jsx(s.span,{className:"code-line",children:`    PRIMITIVE_TORUS,
`}),e.exports.jsx(s.span,{className:"code-line",children:`    PRIMITIVE_SPHERE,
`}),e.exports.jsx(s.span,{className:"code-line",children:`    PRIMITIVE_MESH
`}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["Similarly to ",e.exports.jsx(s.code,{children:"LightType"}),", we have ",e.exports.jsx(s.code,{children:"PrimitiveType"})," to keep track of different kinds of primitives. Again like the lights, the primitive types are used in a struct to describe a specific primitive in the scene:"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"CS123ScenePrimitive"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line",children:`   PrimitiveType type;
`}),e.exports.jsxs(s.span,{className:"code-line",children:["   std::string meshfile;     ",e.exports.jsx(s.span,{className:"pl-c",children:"// Only applicable to meshes"}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`   CS123SceneMaterial material;
`}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["All primitives will have a ",e.exports.jsx(s.code,{children:"PrimitiveType"})," and ",e.exports.jsx(s.code,{children:"CS123SceneMaterial"}),`.
For meshes, the meshfile is a path to an .obj or equivalent file that has mesh geometry.
The material field describes all the important information about what the primitive looks like (its color, how shiny it is, texture, etc). You can look at the struct `,e.exports.jsx(s.code,{children:"CS123SceneMaterial"})," for details, but don't worry if you don't understand any of the terms if they haven't yet been covered in Lecture."]}),`
`,e.exports.jsxs(s.p,{children:["Notice that unlike the lights or camera structs, there aren't any fields in ",e.exports.jsx(s.code,{children:"CS123ScenePrimitive"})," that describe position or orientation. This is because it is more practical to use ",e.exports.jsx(s.strong,{children:"transformation graphs"})," to manage this, especially when we have a lot of primitives!"]}),`
`,e.exports.jsx(s.h2,{id:"transformation-graphs",children:e.exports.jsx(s.a,{href:"#transformation-graphs",children:"Transformation Graphs"})}),`
`,e.exports.jsx(s.h3,{id:"transformations",children:e.exports.jsx(s.a,{href:"#transformations",children:"Transformations"})}),`
`,e.exports.jsxs(s.p,{children:["On ",e.exports.jsx(s.code,{children:"lines 141 - 143"})," you will find the ",e.exports.jsx(s.code,{children:"TransformationType"}),"."]}),`
`,e.exports.jsx(s.p,{children:`Remember how in the transforms lab you learned to compose a series of rotation, scaling and translation matricies into a single transformation matrix?
While every (linear) transfromation can be written as a matrix, it is easier when placing objects in a scene to work with translation, scaling and rotation. This is why we will work with four types of transformations:`}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"enum"}),` TransformationType {
`]}),e.exports.jsx(s.span,{className:"code-line",children:`   TRANSFORMATION_TRANSLATE, TRANSFORMATION_SCALE, TRANSFORMATION_ROTATE, TRANSFORMATION_MATRIX
`}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["Just like lights and primitives, the type of transformation is then stored in a struct that contains the specific information. See ",e.exports.jsx(s.code,{children:"lines 146 - 158"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"CS123SceneTransformation"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line",children:`    TransformationType type;
`}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["    ",e.exports.jsx(s.span,{className:"pl-c",children:"// The following fields are mutually exclusive."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["    glm::vec3 translate; ",e.exports.jsx(s.span,{className:"pl-c",children:"// The translation vector. Only valid if transformation is a translation."}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["    glm::vec3 scale;     ",e.exports.jsx(s.span,{className:"pl-c",children:"// The scale vector. Only valid if transformation is a scale."}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["    glm::vec3 rotate;    ",e.exports.jsx(s.span,{className:"pl-c",children:"// The axis of rotation. Only valid if the transformation is a rotation."}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["    ",e.exports.jsx(s.span,{className:"pl-k",children:"float"})," angle;         ",e.exports.jsx(s.span,{className:"pl-c",children:"// The rotation angle in RADIANS. Only valid if transformation is a rotation."}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsxs(s.span,{className:"code-line",children:["    glm::mat4x4 matrix;  ",e.exports.jsx(s.span,{className:"pl-c",children:"// The matrix for the transformation. Only valid if the transformation is a custom matrix."}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsx(s.h3,{id:"transformation-graphs-1",children:e.exports.jsx(s.a,{href:"#transformation-graphs-1",children:"Transformation Graphs"})}),`
`,e.exports.jsxs(s.p,{children:["Scenes often have tens or hundrends of primitives, each with multiple different transformations! When creating a scene, it means that we'd have to know the exact final position and orientation of every primitive. When rendering, storing the transformations for each one can be particularly inefficient, especially when often ",e.exports.jsx(s.strong,{children:"a single transformation is repeated on many different objects"}),"."]}),`
`,e.exports.jsxs(s.p,{children:["Take a look at ",e.exports.jsx(s.code,{children:"lines 163 - 169"}),":"]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"CS123SceneNode"}),` {
`]}),e.exports.jsx(s.span,{className:"code-line",children:`   std::vector<CS123SceneTransformation*> transformations;
`}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsx(s.span,{className:"code-line",children:`   std::vector<CS123ScenePrimitive*> primitives;
`}),e.exports.jsx(s.span,{className:"code-line",children:`
`}),e.exports.jsx(s.span,{className:"code-line",children:`   std::vector<CS123SceneNode*> children;
`}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),`
`,e.exports.jsxs(s.p,{children:["Here we have created a node struct that will allow us to build a ",e.exports.jsx(s.strong,{children:"transformation graph"}),". If a ",e.exports.jsx(s.code,{children:"CS123SceneNode"})," has ",e.exports.jsx(s.code,{children:"children"}),", it will also likely contain ",e.exports.jsx(s.code,{children:"transformations"})," to apply to those ",e.exports.jsx(s.code,{children:"children"}),", and so on, until we get to a node that has ",e.exports.jsx(s.code,{children:"primitives"}),"."]}),`
`,e.exports.jsxs(s.p,{children:["Note that since ",e.exports.jsx(s.code,{children:"CS123SceneNode"}),"s exist to avoid repetitions of transformations applied to primitives, they cannot have both ",e.exports.jsx(s.code,{children:"transformations"})," and ",e.exports.jsx(s.code,{children:"primitives"}),", or ",e.exports.jsx(s.code,{children:"children"})," and ",e.exports.jsx(s.code,{children:"primitives"}),"."]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Example of a cityscape"}),e.exports.jsx(s.p,{children:`If our scene is a city, it would be senseless to describe the positions of all the windows by their distance from the center of the city. It would be much more sensible to describe each window's position relative to the building it is part of, place the building on the street it is on, and then describe the street's position relative to the center of the city.
Moving a house to a different position would be as simple as applying a transformation matrix to the house, and consequently having that translation applied to every window and primitive it contains.`})]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Example of a cityscape continued"}),e.exports.jsx(s.p,{children:"In our city, we can define a first grouping as the streets, which can themselves be made up of sub-groupings consisting of buildings, which can be made of further sub-groupings of windows, doors and roofs, until we get to the primitives like cubes, pyramids, and cylinders."})]}),`
`,e.exports.jsx(s.h4,{id:"a-simple-transformation-graph",children:e.exports.jsx(s.a,{href:"#a-simple-transformation-graph",children:"A Simple Transformation Graph"})}),`
`,e.exports.jsxs(s.p,{children:["In these two subsections, you will learn how to use ",e.exports.jsx(s.strong,{children:"transformation graphs"})," to build final transformation matrices for each primitive."]}),`
`,e.exports.jsx(s.p,{children:e.exports.jsxs(s.em,{children:["Aside: A final transformation matrix is also called a ",e.exports.jsx(s.strong,{children:"cumulative transformation matrix"}),"."]})}),`
`,e.exports.jsx(s.p,{children:"Consider the graph below that represents four primitives in a scene (two spheres, one cube, one cone and a cylinder):"}),`
`,e.exports.jsx(a,{images:[{src:"/labs/lab5/Parsing_Lab_Simple_Graph-2.png",alt:"TODO"}],figNumber:2,figureCaption:"Transformation Graph with 5 Primitives"}),`
`,e.exports.jsxs(s.p,{children:["Primitives are always leaf nodes. Transformation matrices (denoted ",e.exports.jsx(s.code,{children:"M1"}),", ",e.exports.jsx(s.code,{children:"M2"}),", etc.) are represented on the branches of the graph, and are applied to every child node. All nodes that are not leaf nodes are ",e.exports.jsx(s.code,{children:"CS123SceneNode"}),"s (also called ",e.exports.jsx(s.strong,{children:"transblocks"}),") and can be thought of as groupings of objects as mentioned in ",e.exports.jsx(s.strong,{children:"2.6"}),"."]}),`
`,e.exports.jsx(s.div,{className:"task-callout callout",children:e.exports.jsxs(s.p,{children:["Write the final transformation matrix for the Cube, Cone and Cylinder. - A final transformation matrix is a matrix that transforms a primitive to its final position and orientation in the scene. - Your answer should be a product of matrices ",e.exports.jsx(s.code,{children:"M1"}),", ",e.exports.jsx(s.code,{children:"M2"}),", etc. - Keep in mind that order matters when multiplying matricies!"]})}),`
`,e.exports.jsx(s.h4,{id:"a-more-complex-transformation-graph",children:e.exports.jsx(s.a,{href:"#a-more-complex-transformation-graph",children:"A More Complex Transformation Graph"})}),`
`,e.exports.jsx(s.p,{children:"Now, consider the graph below:"}),`
`,e.exports.jsx(a,{images:[{src:"/labs/lab5/Parsing_Lab_City_Graph_v6.png",alt:"TODO"}],figNumber:3,figureCaption:"Transformation Graph with 8 Primitives"}),`
`,e.exports.jsxs(s.p,{children:["Instead of transformation matricies ",e.exports.jsx(s.code,{children:"M1"}),", ",e.exports.jsx(s.code,{children:"M2"}),`, etc. we have individual transformations such as Scaling,
Translation and Rotation. These are written in the form `,e.exports.jsx(s.code,{children:"S"}),", ",e.exports.jsx(s.code,{children:"T"})," and ",e.exports.jsx(s.code,{children:"R"}),` followed by the parameters
needed for each transformation. For example `,e.exports.jsx(s.code,{children:"S(15,.1,1)"})," scales by ",e.exports.jsx(s.code,{children:"15"})," in the x direction, by ",e.exports.jsx(s.code,{children:".1"}),`
in the y direction and by `,e.exports.jsx(s.code,{children:"1"})," in the z direction. Note that Rotations have four parameters, like ",e.exports.jsx(s.code,{children:"R(x, y, z, angle)"}),". The first three parameters describe the axis of rotation in terms of ",e.exports.jsx(s.code,{children:"x"}),", ",e.exports.jsx(s.code,{children:"y"})," and ",e.exports.jsx(s.code,{children:"z"}),`
axes, and the last parameter is the angle of rotation in degrees.`]}),`
`,e.exports.jsx(s.p,{children:"Like before, only the leaves of this tree contain any real geometry in the form of primitives (cube, sphere, etc)."}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"What scene does this graph represent?"}),e.exports.jsx(s.p,{children:"It represents a simplified version of our city example. We have divided our model into two streets (Willow Street and Main Street). Each of these has a road which is made of one cube that is stretched in the x and squished in the y, as well as a building. Each building is made up of a cube and a door, which is also made up of two cubes! In total we have 8 primitives, all of which are cubes."})]}),`
`,e.exports.jsx(s.div,{className:"task-callout callout",children:e.exports.jsxs(s.p,{children:["Write a matrix ",e.exports.jsx(s.code,{children:"M1"})," that is all the transformations applied only to Cube 2. ",e.exports.jsxs("ul",{children:[" ",e.exports.jsxs("li",{children:[" Your matrix ",e.exports.jsx(s.code,{children:"M1"})," should be in the form of a product of scaling, rotation and translation matrices. "]})," ",e.exports.jsxs("li",{children:[" You can write each scaling, rotation and translation matrices in the form ",e.exports.jsx(s.code,{children:"S(x, y, z)"}),", ",e.exports.jsx(s.code,{children:"R(x, y, z, angle)"})," and ",e.exports.jsx(s.code,{children:"T(x, y, z)"}),"."]})," "]})]})}),`
`,e.exports.jsx(s.div,{className:"task-callout callout",children:e.exports.jsxs(s.p,{children:["Write the final transformation matrix for cubes 1, 3 and 8. ",e.exports.jsxs("ul",{children:[" ",e.exports.jsxs("li",{children:[" This should again be a product of scaling, rotation and translation matrices in the form ",e.exports.jsx(s.code,{children:"S(x, y, z)"}),", ",e.exports.jsx(s.code,{children:"R(x, y, z, angle)"})," and ",e.exports.jsx(s.code,{children:"T(x, y, z)"}),"."]})," "]})]})}),`
`,e.exports.jsx(s.p,{children:"In the previous exercise, you should have noticed that the same transformations repeat for different primitives. Given a tree like the one above, we need a final transformation matrix for each primitive. However, it would be inefficient to traverse the scene graph from the root node every time for each primitive."}),`
`,e.exports.jsx(s.div,{className:"task-callout callout",children:e.exports.jsx(s.p,{children:"Consider how you might build the final transformation matricies from a scene graph using depth first search. Explain how your approach is better in terms of time complexity, and write pseudocode for it."})}),`
`,e.exports.jsx(s.h2,{id:"render-data",children:e.exports.jsx(s.a,{href:"#render-data",children:"Render Data"})}),`
`,e.exports.jsx(s.p,{children:"By now, you should know all about how we represent global, light, camera, primitive and transformation data."}),`
`,e.exports.jsxs(s.p,{children:["You will also implement a depth first search to generate the final transformation matrices for each primitive. To do this, you will be filling in out a struct called CS123SceneMetaData in ",e.exports.jsx(s.code,{children:"CS123SceneLoader::load"}),", based off of data found in the scene provided by a SceneData struct (SceneData.h)."]}),`
`,e.exports.jsx(s.h3,{id:"implementing-cs123sceneloaderload",children:e.exports.jsx(s.a,{href:"#implementing-cs123sceneloaderload",children:"Implementing CS123SceneLoader::load()"})}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsx(s.strong,{children:"Explain the sencil structure, what files do the parsing, what functions to fill in."}),`
Behind the scenes, we have parsed out all this data nicely and you can find it in SceneData.h`]}),`
`,e.exports.jsx(s.h4,{id:"global-data-camera-data",children:e.exports.jsx(s.a,{href:"#global-data-camera-data",children:"Global data Camera Data"})}),`
`,e.exports.jsx(s.p,{children:`In load(), you will need
These are found in the parser member variables.`}),`
`,e.exports.jsx(s.h4,{id:"lights-1",children:e.exports.jsx(s.a,{href:"#lights-1",children:"Lights"})}),`
`,e.exports.jsx(s.p,{children:"Array of structs"}),`
`,e.exports.jsx(s.h4,{id:"read-the-matrix-of-the-root",children:e.exports.jsx(s.a,{href:"#read-the-matrix-of-the-root",children:"Read the matrix of the root"})}),`
`,e.exports.jsxs(s.p,{children:[`Call fsParseSceneNode() in load().
Check that you are correctly printing out the transformation matrix. `,e.exports.jsx(s.strong,{children:"Print out the matrix & provide it so they can check"}),`
In order to make a matrix from a vec::3, you will need to call GLM::rotate, translate, scale. For rotate in particular, look at SceneData.h angle, and rotate.`]}),`
`,e.exports.jsx(s.h4,{id:"depth-first-search-recusively",children:e.exports.jsx(s.a,{href:"#depth-first-search-recusively",children:"Depth-first search recusively"})}),`
`,e.exports.jsxs(s.p,{children:["Whenever we would like to load a scene, we can call ",e.exports.jsx(s.code,{children:"CS123SceneLoader::load"}),". Since this is a class method, there is no need to create any new ",e.exports.jsx(s.code,{children:"CS123SceneLoader"})," instance."]}),`
`,e.exports.jsxs(s.p,{children:["The stencil code already covers the parsing for the XML scene file and what you should do is to create the scene meta-data based on the information inside the parser. In the load function, a new parser instance will be created and try to parse the given file. Upon success, all information will be available via the ",e.exports.jsx(s.code,{children:"CS123ISceneParser"})," interface."]}),`
`,e.exports.jsxs(s.p,{children:["In ",e.exports.jsx(s.code,{children:"CS123SceneLoader::load"}),", you should obtain the global data for the scene, the camera data and the lighting. You should also traverse through the primitive tree and calculate the cumulative transformation matrix for each of them. All data described above can be packed into a ",e.exports.jsx(s.code,{children:"CS123SceneMetaData"})," structure as a unified interface for you to create your own scene for your future assignments."]}),`
`,e.exports.jsx(s.h3,{id:"testing-scenes",children:e.exports.jsx(s.a,{href:"#testing-scenes",children:"Testing scenes"})}),`
`,e.exports.jsx(s.p,{children:`You should have a completed parser that can load all of the scene files. Be prepared to load the things in increasing complexing.
You can run
It will print to console but also show you a visual`}),`
`,e.exports.jsx(s.h2,{id:"optional-creating-your-own-3-d-scenes",children:e.exports.jsx(s.a,{href:"#optional-creating-your-own-3-d-scenes",children:"(Optional) Creating your own 3-d scenes"})}),`
`,e.exports.jsx(s.p,{children:`You might want to work with the scene files directly for a final project, in order to create your own 3-d scenes. You can use this lab as a starting point and reference on how to do that. Below we will describe how the .xml format works, so you can understand how all the data mentioned above is actually written in the scene files.
Description of the .xml format`}),`
`,e.exports.jsx(s.h2,{id:"end",children:e.exports.jsx(s.a,{href:"#end",children:"End"})}),`
`,e.exports.jsx(s.p,{children:`To be checked off, you should have your answers to conceptual questions ready (Tasks 1 through 3).
You should also be able to print out the correct matrices and show a visual of the scene.`}),`
`,e.exports.jsx(r,{})]})]})}function h(t={}){const{wrapper:s}=t.components||{};return s?e.exports.jsx(s,Object.assign({},t,{children:e.exports.jsx(n,t)})):n(t)}export{h as default,c as documentProps};
