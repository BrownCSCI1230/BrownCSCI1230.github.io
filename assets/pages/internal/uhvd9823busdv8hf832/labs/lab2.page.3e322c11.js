import{j as e}from"../../../../chunk-91776ecf.js";import{R as o}from"../../../../chunk-ab46b7f1.js";import{I as r}from"../../../../chunk-31e79074.js";import{M as i}from"../../../../chunk-cab91a23.js";const x={title:"Lab 2"};function n(t){const s=Object.assign({nav:"nav",ol:"ol",li:"li",a:"a",main:"main",h1:"h1",p:"p",div:"div",code:"code",h2:"h2",h3:"h3",strong:"strong",em:"em",ul:"ul",blockquote:"blockquote",span:"span","mjx-container":"mjx-container",svg:"svg",defs:"defs",path:"path",g:"g",use:"use",pre:"pre",hr:"hr",table:"table",thead:"thead",tr:"tr",th:"th",h4:"h4",style:"style"},t.components);return e.exports.jsxs(e.exports.Fragment,{children:[e.exports.jsx(s.nav,{className:"toc",children:e.exports.jsx(s.ol,{className:"toc-level toc-level-1",children:e.exports.jsxs(s.li,{className:"toc-item toc-item-h1",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h1",href:"#lab-2-pencils",children:"Lab 2: Pencils"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-2",children:[e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#introduction",children:"Introduction"}),e.exports.jsx(s.ol,{className:"toc-level toc-level-3",children:e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#objectives",children:"Objectives"})})})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#getting-started",children:"Getting Started"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#stencil-code",children:"Stencil Code"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#command-line-arguments",children:"Command Line Arguments"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#application-windows",children:"Application Windows"})})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#representing-colors",children:"Representing Colors"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#grayscale",children:"Grayscale"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#rgba",children:"RGBA"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#datatypes-and-memory",children:"Datatypes and Memory"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#converting-between-floats-and-ints",children:"Converting Between Floats and Ints"})})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#your-first-canvas",children:"Your First Canvas"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#creating-pixel-data",children:"Creating Pixel Data"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#modifying-pixel-data",children:"Modifying Pixel Data"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#the-rgba-struct",children:"The RGBA Struct"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#an-array-of-structs",children:"An Array Of Structs"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#a-colorful-canvas",children:"A Colorful Canvas"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#making-a-stamp",children:"Making A Stamp"})})]})]}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h2",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#the-pencil-tool",children:"The Pencil Tool"}),e.exports.jsxs(s.ol,{className:"toc-level toc-level-3",children:[e.exports.jsx(s.li,{className:"toc-item toc-item-h3",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#for-your-info-event-handlers",children:"For Your Info: Event Handlers"})}),e.exports.jsxs(s.li,{className:"toc-item toc-item-h3",children:[e.exports.jsx(s.a,{className:"toc-link toc-link-h3",href:"#a-leaky-pencil",children:'A "Leaky" Pencil'}),e.exports.jsx(s.ol,{className:"toc-level toc-level-4",children:e.exports.jsx(s.li,{className:"toc-item toc-item-h4",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h4",href:"#proper-pencil",children:"Proper Pencil"})})})]})]})]}),e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#end",children:"End"})}),e.exports.jsx(s.li,{className:"toc-item toc-item-h2",children:e.exports.jsx(s.a,{className:"toc-link toc-link-h2",href:"#submission",children:"Submission"})})]})]})})}),e.exports.jsxs(s.main,{children:[`
`,`
`,e.exports.jsx(s.h1,{id:"lab-2-pencils",children:e.exports.jsx(s.a,{href:"#lab-2-pencils",children:"Lab 2: Pencils"})}),`
`,e.exports.jsx(s.p,{children:e.exports.jsx(s.a,{href:"https://classroom.github.com/a/j2M4Urp7",target:"_blank",rel:"noopener noreferrer",children:"Github Classroom assignment"})}),`
`,e.exports.jsx(s.div,{className:"task-no-number-callout callout",children:e.exports.jsxs(s.p,{children:["Please put your answers to written questions in this lab, if any, in a Markdown file named ",e.exports.jsx(s.code,{children:"README.md"})," in your lab repo."]})}),`
`,e.exports.jsx(s.h2,{id:"introduction",children:e.exports.jsx(s.a,{href:"#introduction",children:"Introduction"})}),`
`,e.exports.jsxs(s.p,{children:["Welcome to lab 2! This lab is designed to help you get started with ",e.exports.jsx(s.code,{children:"Project 1: Brush"}),"."]}),`
`,e.exports.jsx(s.p,{children:"During this lab, you'll take your first steps into computer graphics by understanding how digital images are represented and modified."}),`
`,e.exports.jsx(s.h3,{id:"objectives",children:e.exports.jsx(s.a,{href:"#objectives",children:"Objectives"})}),`
`,e.exports.jsxs(s.ol,{children:[`
`,e.exports.jsxs(s.li,{children:["Learn about how ",e.exports.jsx(s.strong,{children:"colors"})," and ",e.exports.jsx(s.strong,{children:"digital images"})," are ",e.exports.jsx(s.strong,{children:"represented"})," digitally,"]}),`
`,e.exports.jsxs(s.li,{children:["Create pixel art by ",e.exports.jsx(s.strong,{children:"programmatically modifying"})," an image, and"]}),`
`,e.exports.jsxs(s.li,{children:["Implement a ",e.exports.jsx(s.strong,{children:"Photoshop-like pencil"})," to ",e.exports.jsx(s.strong,{children:"draw"})," on a canvas interactively!"]}),`
`]}),`
`,e.exports.jsx(s.h2,{id:"getting-started",children:e.exports.jsx(s.a,{href:"#getting-started",children:"Getting Started"})}),`
`,e.exports.jsxs(s.div,{className:"warning-callout callout",children:[e.exports.jsxs(s.p,{children:["All subsequent labs and projects in CS 1230 will follow these same getting-started instructions. ",e.exports.jsx(s.em,{children:"We won't repeat them again!"})]}),e.exports.jsx(s.p,{children:"If you have doubts or questions at any point, be sure to check with a TA or ask on Ed."})]}),`
`,e.exports.jsx(s.h3,{id:"stencil-code",children:e.exports.jsx(s.a,{href:"#stencil-code",children:"Stencil Code"})}),`
`,e.exports.jsxs(s.p,{children:["Like in lab 1, we've provided you with some stencil code (linked at the top of this page) to get you started. As always, you should ",e.exports.jsx(s.code,{children:"git clone"})," the created repository to your local machine, then open the project in QtCreator."]}),`
`,e.exports.jsx(s.h3,{id:"command-line-arguments",children:e.exports.jsx(s.a,{href:"#command-line-arguments",children:"Command Line Arguments"})}),`
`,e.exports.jsx(s.p,{children:`Many labs and projects in CS 1230 will use command line arguments to toggle between different configurations, and this lab is
no different. In this lab, you will be using command line arguments to select the type of canvas you wish to use.`}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["Set the command line argument to ",e.exports.jsx(s.code,{children:"grayscale"}),"."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:["To set the command line input, click the ",e.exports.jsx(s.code,{children:"Projects"})," tab on the left sidebar. Under ",e.exports.jsx(s.code,{children:"Build and Run > Run > Command Line Arguments"}),", you can enter command line arguments which will be supplied to the application when it is run."]}),`
`,e.exports.jsxs(s.li,{children:[e.exports.jsx(s.code,{children:"grayscale"})," makes the application window use a grayscale canvas."]}),`
`,e.exports.jsxs(s.li,{children:["Later, we will change this argument to ",e.exports.jsx(s.code,{children:"color"}),", to add some color to our application window's canvas."]}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:"The command line argument interface should look something like this:"}),`
`,e.exports.jsx(r,{images:[{src:"/labs/lab2/cli-interface.png",alt:"Command line argument interface"}],figNumber:1,figCaption:"You can set command line arguments in Projects > Run > Command Line Arguments."}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Extra: why do we use command line arguments?"}),e.exports.jsxs(s.p,{children:["In general, it's a good idea to separate config (configuration) from code. There are many reasons to do this, but for us, it primarily serves to ",e.exports.jsx(s.strong,{children:"reduce development latency"}),"."]}),e.exports.jsxs(s.p,{children:["In the next task, you will run your code. While you're doing this, you ",e.exports.jsx(s.em,{children:"might"})," notice a significant delay between when you hit play and when you see the GUI window appear\u2014this is because it is building your application. However, in subsequent runs, this delay will be much shorter\u2014this is because changing the command line argument doesn't trigger a re-build of your app from its C++ source code."]}),e.exports.jsx(s.p,{children:`If our config was instead stored in the source code (e.g. in a string), any changes to that config would trigger a
time-consuming re-build, which can be very annoying when developing or debugging.`}),e.exports.jsxs(s.p,{children:["Of course, command line arguments aren't the only way of separating config from code: there are plenty of other ways to express configuration in Qt, including ",e.exports.jsx(s.code,{children:"QConfig"})," and ",e.exports.jsx(s.code,{children:".ini"})," files, which you will see later in the course."]})]}),`
`,e.exports.jsx(s.h3,{id:"application-windows",children:e.exports.jsx(s.a,{href:"#application-windows",children:"Application Windows"})}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsx(s.p,{children:'Run the project in order to display the application window. To do so, click the big green "play" button at the bottom-left corner of the QtCreator interface.'}),e.exports.jsxs(s.blockquote,{children:[`
`,e.exports.jsxs(s.p,{children:["Remember to run in ",e.exports.jsx(s.code,{children:"Release"})," mode. The speedup won't be significant now, but it's a good idea to get used to doing this."]}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:"If everything works as intended, an application window should appear. It should look like this:"}),`
`,e.exports.jsx(r,{images:[{src:"/labs/lab2/pencils-ui.png",alt:"Application window"}],targetWidth:"50%",figNumber:2,figCaption:"The application window, with an uninitialized canvas."}),`
`,e.exports.jsxs(s.blockquote,{children:[`
`,e.exports.jsxs(s.p,{children:["Interested in how GUI elements like these are set up? Feel free to take a look at ",e.exports.jsx(s.code,{children:"mainwindow.h"})," and ",e.exports.jsx(s.code,{children:"mainwindow.cpp"})," in our stencil code!"]}),`
`]}),`
`,e.exports.jsx(s.h2,{id:"representing-colors",children:e.exports.jsx(s.a,{href:"#representing-colors",children:"Representing Colors"})}),`
`,e.exports.jsxs(s.p,{children:["In computer graphics, ",e.exports.jsx(s.strong,{children:"images"})," are often represented as arrays of ",e.exports.jsx(s.strong,{children:"pixels"}),", which simply store some form of data. Pixels are most often used to encode ",e.exports.jsx(s.strong,{children:"color"})," data, though, technically, they can be used to encode any kind of information."]}),`
`,e.exports.jsxs(s.blockquote,{children:[`
`,e.exports.jsxs(s.p,{children:["Later in CS 1230, we'll use ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Heightmap",target:"_blank",rel:"noopener noreferrer",children:"height maps"})," and ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Z-buffering",target:"_blank",rel:"noopener noreferrer",children:"depth buffers"})," to encode linear displacement, and even ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Normal_mapping",target:"_blank",rel:"noopener noreferrer",children:"normal maps"})," to encode directions!"]}),`
`]}),`
`,e.exports.jsx(s.p,{children:"In this section, we'll explore how we can represent color data in code."}),`
`,e.exports.jsx(s.h3,{id:"grayscale",children:e.exports.jsx(s.a,{href:"#grayscale",children:"Grayscale"})}),`
`,e.exports.jsxs(s.p,{children:["In a grayscale image like the one below, each pixel requires only ",e.exports.jsx(s.strong,{children:"one"})," value to encode its intensity. Equivalently, we might say that a grayscale image has ",e.exports.jsxs(s.strong,{children:["one ",e.exports.jsx(s.em,{children:"channel"})]}),". The values stored in this channel can be represented in code as ",e.exports.jsx(s.code,{children:"float"}),"s."]}),`
`,e.exports.jsx(r,{images:[{src:"/labs/lab2/grayscale-matrix.png",alt:"Grayscale image represented as a 2D array of float values"}],figNumber:3,figCaption:"A grayscale image can be represented as a 2D array of float values."}),`
`,e.exports.jsxs(s.p,{children:["Purely by convention, we define ",e.exports.jsx(s.code,{children:"0"})," as the lowest intensity (completely black), and ",e.exports.jsx(s.code,{children:"1"})," as the highest intensity (completely white). ",e.exports.jsx(s.code,{children:"0.5"})," would be gray, and ",e.exports.jsx(s.code,{children:"0.7"})," would be a lighter shade of gray."]}),`
`,e.exports.jsx(s.h3,{id:"rgba",children:e.exports.jsx(s.a,{href:"#rgba",children:"RGBA"})}),`
`,e.exports.jsx(s.p,{children:"Grayscale images are kind of boring, so let's move on to color images! But to begin using colors, we must first decide on how to describe them."}),`
`,e.exports.jsxs(s.p,{children:["In CS 1230, we will be using the ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/RGBA_color_model",target:"_blank",rel:"noopener noreferrer",children:"red-green-blue-alpha (RGBA) model"}),". In this model, every pixel in an image requires ",e.exports.jsx(s.strong,{children:"four"})," distinct values. Equivalently, we might say that an RGBA-colored image has ",e.exports.jsxs(s.strong,{children:["four ",e.exports.jsx(s.em,{children:"channels"})]}),": red, green, blue, and alpha."]}),`
`,e.exports.jsxs(s.p,{children:["The alpha channel represents the opacity of the color. You will dive deeper into this concept in ",e.exports.jsx(s.code,{children:"Project 1: Brush"}),". For now, let's focus on red, green, and blue."]}),`
`,e.exports.jsx(s.p,{children:"Play around with the color picker below by dragging the point around:"}),`
`,e.exports.jsx(o,{}),`
`,e.exports.jsxs(s.p,{children:["First off, notice that we're no longer using real-numbered values ranging from ",e.exports.jsx(s.code,{children:"0"})," to ",e.exports.jsx(s.code,{children:"1"}),". Instead, we're using ",e.exports.jsxs(s.strong,{children:["integers ranging from ",e.exports.jsx(s.code,{children:"0"})," to ",e.exports.jsx(s.code,{children:"255"})]}),". This shouldn't be too hard to adapt to, and we'll explain why we do this in the next section."]}),`
`,e.exports.jsxs(s.p,{children:["But before that, experiment with how different channels interact to produce colors. An RGB value of ",e.exports.jsx(s.code,{children:"(255, 0, 0)"})," gives us ",e.exports.jsx(s.strong,{children:"red"}),", ",e.exports.jsx(s.code,{children:"(0, 255, 0)"})," gives us ",e.exports.jsx(s.strong,{children:"green"}),", and ",e.exports.jsx(s.code,{children:"(0, 0, 255)"})," gives us ",e.exports.jsx(s.strong,{children:"blue"}),'. What color do you get when you "combine" all three? If the result surprises you, click on the note below!']}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Extra: additive vs subtractive color mixing"}),e.exports.jsxs(s.p,{children:["If you've any experience with paint, you might know that mixing all your primary colors produces a dark color. However, in the color picker above, red + green + blue somehow gives us ",e.exports.jsx(s.strong,{children:"white"}),"!"]}),e.exports.jsxs(s.p,{children:["This is because we're working with ",e.exports.jsx(s.strong,{children:"light"})," (from your computer screen), rather than ",e.exports.jsx(s.strong,{children:"pigment"})," from paint. Therefore, we're actually dealing with ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Additive_color",target:"_blank",rel:"noopener noreferrer",children:"additive color"})," rather than ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Subtractive_color",target:"_blank",rel:"noopener noreferrer",children:"subtractive color"}),"."]}),e.exports.jsx(r,{images:[{src:"/labs/lab2/color-mixing-additive.webp",alt:"Additive color mixing"},{src:"/labs/lab2/color-mixing-subtractive.webp",alt:"Subtractive color mixing"}],figNumber:4,figCaption:"Additive and subtractive color mixing. Note how they use different primary colors!"})]}),`
`,e.exports.jsx(s.h3,{id:"datatypes-and-memory",children:e.exports.jsx(s.a,{href:"#datatypes-and-memory",children:"Datatypes and Memory"})}),`
`,e.exports.jsxs(s.p,{children:["Earlier, we said that ",e.exports.jsx(s.code,{children:"float"}),"s could be used to represent intensity. However, ",e.exports.jsx(s.code,{children:"float"}),"s typically occupy 4 bytes, and this adds up quickly: if we used floats for a RGBA images, each pixel would require 16 bytes, and a ",e.exports.jsx(s.code,{children:"1000 x 1000"})," image would take up ",e.exports.jsx(s.span,{className:"math math-inline",children:e.exports.jsx(s["mjx-container"],{className:"MathJax",jax:"SVG",children:e.exports.jsxs(s.svg,{style:{verticalAlign:"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"26.144ex",height:"1.731ex",role:"img",focusable:"false",viewBox:"0 -683 11555.4 765",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[e.exports.jsxs(s.defs,{children:[e.exports.jsx(s.path,{id:"MJX-1-TEX-N-31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}),e.exports.jsx(s.path,{id:"MJX-1-TEX-N-30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}),e.exports.jsx(s.path,{id:"MJX-1-TEX-N-2217",d:"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"}),e.exports.jsx(s.path,{id:"MJX-1-TEX-N-36",d:"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"}),e.exports.jsx(s.path,{id:"MJX-1-TEX-N-42",d:"M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z"}),e.exports.jsx(s.path,{id:"MJX-1-TEX-N-3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}),e.exports.jsx(s.path,{id:"MJX-1-TEX-N-4D",d:"M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"})]}),e.exports.jsx(s.g,{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",transform:"scale(1,-1)",children:e.exports.jsxs(s.g,{"data-mml-node":"math",children:[e.exports.jsxs(s.g,{"data-mml-node":"mn",children:[e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-1-TEX-N-31"}),e.exports.jsx(s.use,{"data-c":"30",xlinkHref:"#MJX-1-TEX-N-30",transform:"translate(500,0)"}),e.exports.jsx(s.use,{"data-c":"30",xlinkHref:"#MJX-1-TEX-N-30",transform:"translate(1000,0)"}),e.exports.jsx(s.use,{"data-c":"30",xlinkHref:"#MJX-1-TEX-N-30",transform:"translate(1500,0)"})]}),e.exports.jsx(s.g,{"data-mml-node":"mo",transform:"translate(2222.2,0)",children:e.exports.jsx(s.use,{"data-c":"2217",xlinkHref:"#MJX-1-TEX-N-2217"})}),e.exports.jsxs(s.g,{"data-mml-node":"mn",transform:"translate(2944.4,0)",children:[e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-1-TEX-N-31"}),e.exports.jsx(s.use,{"data-c":"30",xlinkHref:"#MJX-1-TEX-N-30",transform:"translate(500,0)"}),e.exports.jsx(s.use,{"data-c":"30",xlinkHref:"#MJX-1-TEX-N-30",transform:"translate(1000,0)"}),e.exports.jsx(s.use,{"data-c":"30",xlinkHref:"#MJX-1-TEX-N-30",transform:"translate(1500,0)"})]}),e.exports.jsx(s.g,{"data-mml-node":"mo",transform:"translate(5166.7,0)",children:e.exports.jsx(s.use,{"data-c":"2217",xlinkHref:"#MJX-1-TEX-N-2217"})}),e.exports.jsxs(s.g,{"data-mml-node":"mn",transform:"translate(5888.9,0)",children:[e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-1-TEX-N-31"}),e.exports.jsx(s.use,{"data-c":"36",xlinkHref:"#MJX-1-TEX-N-36",transform:"translate(500,0)"})]}),e.exports.jsx(s.g,{"data-mml-node":"mtext",transform:"translate(6888.9,0)",children:e.exports.jsx(s.use,{"data-c":"42",xlinkHref:"#MJX-1-TEX-N-42"})}),e.exports.jsx(s.g,{"data-mml-node":"mo",transform:"translate(7874.7,0)",children:e.exports.jsx(s.use,{"data-c":"3D",xlinkHref:"#MJX-1-TEX-N-3D"})}),e.exports.jsxs(s.g,{"data-mml-node":"mn",transform:"translate(8930.4,0)",children:[e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-1-TEX-N-31"}),e.exports.jsx(s.use,{"data-c":"36",xlinkHref:"#MJX-1-TEX-N-36",transform:"translate(500,0)"})]}),e.exports.jsxs(s.g,{"data-mml-node":"mtext",transform:"translate(9930.4,0)",children:[e.exports.jsx(s.use,{"data-c":"4D",xlinkHref:"#MJX-1-TEX-N-4D"}),e.exports.jsx(s.use,{"data-c":"42",xlinkHref:"#MJX-1-TEX-N-42",transform:"translate(917,0)"})]})]})})]})})})," of memory."]}),`
`,e.exports.jsxs(s.p,{children:[e.exports.jsxs(s.strong,{children:["To avoid this, the vast majority of displays today use ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Color_depth#True_color_(24-bit)",target:"_blank",rel:"noopener noreferrer",children:"24-bit true color"})," (8 bits per color channel, not including alpha)"]}),". This lets each color channel have ",e.exports.jsx(s.span,{className:"math math-inline",children:e.exports.jsx(s["mjx-container"],{className:"MathJax",jax:"SVG",children:e.exports.jsxs(s.svg,{style:{verticalAlign:"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.53ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3770.1 915.9",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[e.exports.jsxs(s.defs,{children:[e.exports.jsx(s.path,{id:"MJX-2-TEX-N-32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}),e.exports.jsx(s.path,{id:"MJX-2-TEX-N-38",d:"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"}),e.exports.jsx(s.path,{id:"MJX-2-TEX-N-3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}),e.exports.jsx(s.path,{id:"MJX-2-TEX-N-35",d:"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"}),e.exports.jsx(s.path,{id:"MJX-2-TEX-N-36",d:"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"})]}),e.exports.jsx(s.g,{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",transform:"scale(1,-1)",children:e.exports.jsxs(s.g,{"data-mml-node":"math",children:[e.exports.jsxs(s.g,{"data-mml-node":"msup",children:[e.exports.jsx(s.g,{"data-mml-node":"mn",children:e.exports.jsx(s.use,{"data-c":"32",xlinkHref:"#MJX-2-TEX-N-32"})}),e.exports.jsx(s.g,{"data-mml-node":"mn",transform:"translate(533,363) scale(0.707)",children:e.exports.jsx(s.use,{"data-c":"38",xlinkHref:"#MJX-2-TEX-N-38"})})]}),e.exports.jsx(s.g,{"data-mml-node":"mo",transform:"translate(1214.3,0)",children:e.exports.jsx(s.use,{"data-c":"3D",xlinkHref:"#MJX-2-TEX-N-3D"})}),e.exports.jsxs(s.g,{"data-mml-node":"mn",transform:"translate(2270.1,0)",children:[e.exports.jsx(s.use,{"data-c":"32",xlinkHref:"#MJX-2-TEX-N-32"}),e.exports.jsx(s.use,{"data-c":"35",xlinkHref:"#MJX-2-TEX-N-35",transform:"translate(500,0)"}),e.exports.jsx(s.use,{"data-c":"36",xlinkHref:"#MJX-2-TEX-N-36",transform:"translate(1000,0)"})]})]})})]})})})," distinct values, and from this, we can generate ",e.exports.jsx(s.span,{className:"math math-inline",children:e.exports.jsx(s["mjx-container"],{className:"MathJax",jax:"SVG",children:e.exports.jsxs(s.svg,{style:{verticalAlign:"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"17.016ex",height:"2.003ex",role:"img",focusable:"false",viewBox:"0 -863.3 7521.1 885.3",xmlnsXlink:"http://www.w3.org/1999/xlink",children:[e.exports.jsxs(s.defs,{children:[e.exports.jsx(s.path,{id:"MJX-3-TEX-N-32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-35",d:"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-36",d:"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-2248",d:"M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-37",d:"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-A0",d:""}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-6D",d:"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-69",d:"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-6C",d:"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-6F",d:"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"}),e.exports.jsx(s.path,{id:"MJX-3-TEX-N-6E",d:"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"})]}),e.exports.jsx(s.g,{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",transform:"scale(1,-1)",children:e.exports.jsxs(s.g,{"data-mml-node":"math",children:[e.exports.jsxs(s.g,{"data-mml-node":"msup",children:[e.exports.jsxs(s.g,{"data-mml-node":"mn",children:[e.exports.jsx(s.use,{"data-c":"32",xlinkHref:"#MJX-3-TEX-N-32"}),e.exports.jsx(s.use,{"data-c":"35",xlinkHref:"#MJX-3-TEX-N-35",transform:"translate(500,0)"}),e.exports.jsx(s.use,{"data-c":"36",xlinkHref:"#MJX-3-TEX-N-36",transform:"translate(1000,0)"})]}),e.exports.jsx(s.g,{"data-mml-node":"mn",transform:"translate(1533,393.1) scale(0.707)",children:e.exports.jsx(s.use,{"data-c":"33",xlinkHref:"#MJX-3-TEX-N-33"})})]}),e.exports.jsx(s.g,{"data-mml-node":"mo",transform:"translate(2214.3,0)",children:e.exports.jsx(s.use,{"data-c":"2248",xlinkHref:"#MJX-3-TEX-N-2248"})}),e.exports.jsxs(s.g,{"data-mml-node":"mn",transform:"translate(3270.1,0)",children:[e.exports.jsx(s.use,{"data-c":"31",xlinkHref:"#MJX-3-TEX-N-31"}),e.exports.jsx(s.use,{"data-c":"37",xlinkHref:"#MJX-3-TEX-N-37",transform:"translate(500,0)"})]}),e.exports.jsxs(s.g,{"data-mml-node":"mtext",transform:"translate(4270.1,0)",children:[e.exports.jsx(s.use,{"data-c":"A0",xlinkHref:"#MJX-3-TEX-N-A0"}),e.exports.jsx(s.use,{"data-c":"6D",xlinkHref:"#MJX-3-TEX-N-6D",transform:"translate(250,0)"}),e.exports.jsx(s.use,{"data-c":"69",xlinkHref:"#MJX-3-TEX-N-69",transform:"translate(1083,0)"}),e.exports.jsx(s.use,{"data-c":"6C",xlinkHref:"#MJX-3-TEX-N-6C",transform:"translate(1361,0)"}),e.exports.jsx(s.use,{"data-c":"6C",xlinkHref:"#MJX-3-TEX-N-6C",transform:"translate(1639,0)"}),e.exports.jsx(s.use,{"data-c":"69",xlinkHref:"#MJX-3-TEX-N-69",transform:"translate(1917,0)"}),e.exports.jsx(s.use,{"data-c":"6F",xlinkHref:"#MJX-3-TEX-N-6F",transform:"translate(2195,0)"}),e.exports.jsx(s.use,{"data-c":"6E",xlinkHref:"#MJX-3-TEX-N-6E",transform:"translate(2695,0)"})]})]})})]})})})," different RGB colors! This is more than enough*, as the human eye can discriminate only around 10 million colors."]}),`
`,e.exports.jsxs(s.p,{children:["Conveniently, 8 bits (1 byte) is also the size of an ",e.exports.jsxs(s.strong,{children:["unsigned integer in the range ",e.exports.jsx(s.code,{children:"[0, 255]"})]}),", so..."]}),`
`,e.exports.jsx(s.div,{className:"success-callout callout",children:e.exports.jsxs(s.p,{children:["In CS 1230, the type we will be using for our color (and alpha) channel data is ",e.exports.jsx(s.strong,{children:e.exports.jsx(s.code,{children:"std::uint8_t"})}),". This is a type provided by the C++ standard library."]})}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Extra: 8-bit color"}),e.exports.jsxs(s.p,{children:["A single pixel occupying 24 bits was unfathomable in the early days of computer graphics, when memory was much more expensive. Getting around this limitation is why methods like ",e.exports.jsx(s.strong,{children:e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/8-bit_color",target:"_blank",rel:"noopener noreferrer",children:"8-bit color"})})," (3 red, 3 green, 2 blue) existed."]}),e.exports.jsxs(s.p,{children:["There were plenty of other ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Color_depth",target:"_blank",rel:"noopener noreferrer",children:"color depths"}),", too: 1-bit, 2-bit, 4-bit, etc."]})]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsxs("summary",{children:["* Extra: is 24 bits ",e.exports.jsx(s.em,{children:"really"})," enough?"]}),e.exports.jsx(s.p,{children:`While it is indeed true that the human eye can discriminate only around ten million colors, those colors aren't necessarily distributed in "perception space" the same way as they are distributed in "display space" (the subset of colors that can be produced by a display).`}),e.exports.jsxs(s.p,{children:["Consequently, we can in fact perceive supposedly-smooth changes in color as ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Colour_banding",target:"_blank",rel:"noopener noreferrer",children:"color banding"}),". Depending on the quality of your device's display, you ",e.exports.jsx(s.em,{children:"might"})," perceive color banding in the gradient below:"]}),e.exports.jsx("div",{style:{height:40,background:"linear-gradient(to left, #333, #666)"}})]}),`
`,e.exports.jsx(s.h3,{id:"converting-between-floats-and-ints",children:e.exports.jsx(s.a,{href:"#converting-between-floats-and-ints",children:"Converting Between Floats and Ints"})}),`
`,e.exports.jsxs(s.p,{children:["At this point, you've seen the ",e.exports.jsx(s.code,{children:"0-255"})," integer representation of intensity, as well as the ",e.exports.jsx(s.code,{children:"0-1"})," float representation. Converting from one to the other is simple, and it's likely that you'll be doing it a lot of that in this course, so you may as well get started:"]}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["In the ",e.exports.jsx(s.code,{children:"GrayCanvas"})," class, implement the ",e.exports.jsx(s.code,{children:"floatToInt()"})," function. This function converts the ",e.exports.jsx(s.code,{children:"0-1"})," float representation of intensity to the ",e.exports.jsx(s.code,{children:"0-255"})," integer representation."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:["Tip: the ",e.exports.jsx(s.code,{children:"round()"})," function in the ",e.exports.jsx(s.code,{children:"cmath"})," library will be helpful."]}),`
`]})]}),`
`,e.exports.jsx(s.h2,{id:"your-first-canvas",children:e.exports.jsx(s.a,{href:"#your-first-canvas",children:"Your First Canvas"})}),`
`,e.exports.jsxs(s.p,{children:["Now that you've gotten the basics of ",e.exports.jsx(s.strong,{children:"color representation"}),", let's create a canvas!"]}),`
`,e.exports.jsx(s.h3,{id:"creating-pixel-data",children:e.exports.jsx(s.a,{href:"#creating-pixel-data",children:"Creating Pixel Data"})}),`
`,e.exports.jsxs(s.p,{children:["In lab 1, you learned that you can use ",e.exports.jsx(s.strong,{children:"containers"})," like ",e.exports.jsx(s.code,{children:"std::vector"})," or ",e.exports.jsx(s.code,{children:"std::array"})," to store linear collections of data."]}),`
`,e.exports.jsxs(s.p,{children:['Although those are 1D data structures, we can fairly easily store 2D arrays of data in them by "flattening" our data. There are two common ways of doing just that: (1) ',e.exports.jsx(s.strong,{children:"row-major ordering"})," and (2) ",e.exports.jsx(s.strong,{children:"column-major ordering"}),":"]}),`
`,e.exports.jsx(r,{images:[{src:"/labs/lab2/row-major.png",alt:"Row Major Order"},{src:"/labs/lab2/col-major.png",alt:"Col Major Order"}],figNumber:5,figCaption:"Row- and column-major ordering."}),`
`,e.exports.jsxs(s.p,{children:["Observe how the ",e.exports.jsx(s.code,{children:"2x4"})," array in the example above is filled. When using row-major order, the array gets filled row-by-row; when using column-major order, it gets filled column-by-column."]}),`
`,e.exports.jsx(s.div,{className:"success-callout callout",children:e.exports.jsxs(s.p,{children:["In CS 1230, we'll always store pixel data in ",e.exports.jsx(s.strong,{children:"row-major order"}),"."]})}),`
`,e.exports.jsx(s.p,{children:"Of course, ordering means nothing if we don't have a canvas to begin with, so:"}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["In the ",e.exports.jsx(s.code,{children:"GrayCanvas"})," class, implement the ",e.exports.jsx(s.code,{children:"initializeGrayCanvas()"})," function. This function should make ",e.exports.jsx(s.code,{children:"m_canvasData"})," a ",e.exports.jsx(s.code,{children:"10 x 10"})," canvas and fill it with a dark gray of intensity ",e.exports.jsx(s.code,{children:"0.123"}),"."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:[e.exports.jsx(s.code,{children:"m_canvasData"})," is a member variable of the ",e.exports.jsx(s.code,{children:"GrayCanvas"})," class. It has already been declared for you, in ",e.exports.jsx(s.code,{children:"ui/graycanvas.h"}),"."]}),`
`,e.exports.jsxs(s.li,{children:[e.exports.jsxs(s.em,{children:["What type does ",e.exports.jsx(s.code,{children:"m_canvasData"})," have?"]})," You may find that you have to do a conversion from the provided intensity value."]}),`
`,e.exports.jsxs(s.li,{children:["Rather than using a for loop to fill the canvas, think about how you could do this more concisely: you might consider using ",e.exports.jsx(s.code,{children:"assign()"})," or ",e.exports.jsx(s.code,{children:"fill()"}),"."]}),`
`,e.exports.jsxs(s.li,{children:["Your command line argument should still be: ",e.exports.jsx(s.code,{children:"grayscale"}),"."]}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:"Your canvas should now look like this:"}),`
`,e.exports.jsx(r,{images:[{src:"/labs/lab2/canvas-gray.png",alt:"Grayscale canvas"}],targetWidth:"50%",figNumber:6,figCaption:"A canvas filled with dark gray."}),`
`,e.exports.jsx(s.h3,{id:"modifying-pixel-data",children:e.exports.jsx(s.a,{href:"#modifying-pixel-data",children:"Modifying Pixel Data"})}),`
`,e.exports.jsxs(s.p,{children:["Now that we ",e.exports.jsx(s.em,{children:"have"}),` a canvas, we can attempt to index into our image to modify it. However, indexing can be a little tricky since our underlying data structure is a non-nested (i.e. "flat") 1D array. If we are given a pixel's `,e.exports.jsx(s.strong,{children:"x and y coordinates"}),", we must compute its ",e.exports.jsx(s.strong,{children:"index"})," in order to access it."]}),`
`,e.exports.jsxs(s.p,{children:["Your job in this section is to work out which pixels correspond to which elements in the array, then change their values. ",e.exports.jsxs(s.strong,{children:["Remember that our images are stored in ",e.exports.jsx(s.em,{children:"row-major order"})]}),"!"]}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["Implement ",e.exports.jsx(s.code,{children:"createHeart()"})," such that, by modifying specific pixels in ",e.exports.jsx(s.code,{children:"m_canvasData"}),", it draws a heart on the canvas (see ",e.exports.jsx(s.a,{href:"#figure-7",children:"figure 7"}),"). ",e.exports.jsx(s.strong,{children:"Then, take a screenshot of your drawing!"})]}),e.exports.jsx(r,{images:[{src:"/labs/lab2/heart.png",alt:"Heart drawing"}],targetWidth:"50%",figNumber:7,figCaption:"A heart drawn on a grayscale canvas."}),e.exports.jsxs(s.blockquote,{children:[`
`,e.exports.jsx(s.p,{children:"Note: the grid overlaid on the image above is not part of the expected output. It is there for visualization purposes only."}),`
`]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:["In ",e.exports.jsx(s.code,{children:"createHeart()"}),", set the heart's pixels to intensity ",e.exports.jsx(s.code,{children:"1.0"})," (from ",e.exports.jsx(s.code,{children:"0.123"})," previously)."]}),`
`,e.exports.jsxs(s.li,{children:["Then, in the ",e.exports.jsx(s.code,{children:"initializeGrayCanvas()"})," function, call your ",e.exports.jsx(s.code,{children:"createHeart()"})," function."]}),`
`,e.exports.jsxs(s.li,{children:["Your command line argument should still be: ",e.exports.jsx(s.code,{children:"grayscale"}),"."]}),`
`]})]}),`
`,e.exports.jsx(s.h3,{id:"the-rgba-struct",children:e.exports.jsx(s.a,{href:"#the-rgba-struct",children:"The RGBA Struct"})}),`
`,e.exports.jsxs(s.p,{children:["Now, let's make the canvas a bit more colorful. To do this, we'll need a ",e.exports.jsx(s.code,{children:"std::vector"})," of something that contains all 4 ",e.exports.jsx(s.strong,{children:"RGBA"})," channels. Since we'd like to group several related variables together, we really ought to use a ",e.exports.jsx(s.strong,{children:"struct"}),"."]}),`
`,e.exports.jsxs(s.p,{children:["Take a look at the ",e.exports.jsx(s.code,{children:"RGBA.h"})," file, where we define an ",e.exports.jsx(s.code,{children:"RGBA"})," struct containing four members: red, green, blue, and alpha. ",e.exports.jsx(s.strong,{children:"This is the RGBA struct you will be using for the rest of your assignments!"})]}),`
`,e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"1",children:["#",e.exports.jsx(s.span,{className:"pl-k",children:"pragma"}),` once
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"2",children:`
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"3",children:["#",e.exports.jsx(s.span,{className:"pl-k",children:"include"})," ",e.exports.jsxs(s.span,{className:"pl-s",children:[e.exports.jsx(s.span,{className:"pl-pds",children:"<"}),"cstdint",e.exports.jsx(s.span,{className:"pl-pds",children:">"})]}),`
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"4",children:`
`}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"5",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"RGBA"}),` {
`]}),e.exports.jsxs(s.span,{className:"code-line line-number highlight-line",line:"6",children:["    std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"}),` r;
`]}),e.exports.jsxs(s.span,{className:"code-line line-number highlight-line",line:"7",children:["    std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"}),` g;
`]}),e.exports.jsxs(s.span,{className:"code-line line-number highlight-line",line:"8",children:["    std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"}),` b;
`]}),e.exports.jsxs(s.span,{className:"code-line line-number highlight-line",line:"9",children:["    std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"})," a = ",e.exports.jsx(s.span,{className:"pl-c1",children:"255"}),`;
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"10",children:`};
`})]})}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Extra: why is it in a header file?"}),e.exports.jsx(s.p,{children:"In lab 1, you learned how to define a struct in the same file that it would be used in."}),e.exports.jsxs(s.p,{children:["In ",e.exports.jsx(s.code,{children:"RGBA.h"}),", we are defining our struct in the same way. However, by putting its definition in a separate header file, we can now use this struct in any other file by ",e.exports.jsx(s.code,{children:"#include"}),"-ing ",e.exports.jsx(s.code,{children:"RGBA.h"}),"."]})]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsxs("summary",{children:["Extra: what else is in ",e.exports.jsx(s.code,{children:"RGBA.h"}),"?"]}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsx(s.code,{className:"language-cpp code-highlight",children:e.exports.jsxs(s.span,{className:"code-line line-number highlight-line",line:"1",children:["#",e.exports.jsx(s.span,{className:"pl-k",children:"pragma"}),` once
`]})})}),e.exports.jsxs(s.p,{children:["Line 1 contains a preprocessor directive ",e.exports.jsx(s.code,{children:"#pragma once"}),", which serves as an ",e.exports.jsx(s.a,{href:"https://en.wikipedia.org/wiki/Include_guard",target:"_blank",rel:"noopener noreferrer",children:"include guard"}),". This lets us ",e.exports.jsx(s.code,{children:"#include"})," the header file multiple times without having to worry about errors due to the same struct being defined multiple times. Why would you ",e.exports.jsx(s.code,{children:"#include"})," the same file multiple times? This can happen, for example, if you ",e.exports.jsx(s.code,{children:"#include"})," two header files which ",e.exports.jsx(s.em,{children:"themselves"})," each ",e.exports.jsx(s.code,{children:"#include"})," ",e.exports.jsx(s.code,{children:"RGBA.h"}),"."]}),e.exports.jsx(s.p,{children:"Sometimes, you might see an include guard that looks like this, instead. It works just as well, though it's a tad more verbose and therefore prone to error:"}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:["#",e.exports.jsx(s.span,{className:"pl-k",children:"ifndef"}),` RGBA
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["#",e.exports.jsx(s.span,{className:"pl-k",children:"define"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"RGBA"}),`
`]}),e.exports.jsx(s.span,{className:"code-line",children:`...
`}),e.exports.jsxs(s.span,{className:"code-line",children:["#",e.exports.jsx(s.span,{className:"pl-k",children:"endif"})," ",e.exports.jsx(s.span,{className:"pl-c",children:"/* RGBA */"}),`
`]})]})}),e.exports.jsx(s.hr,{}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line line-number",line:"5",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"RGBA"}),` {
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"6",children:["    std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"}),` r;
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"7",children:["    std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"}),` g;
`]}),e.exports.jsxs(s.span,{className:"code-line line-number",line:"8",children:["    std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"}),` b;
`]}),e.exports.jsxs(s.span,{className:"code-line line-number highlight-line",line:"9",children:["    std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"})," a = ",e.exports.jsx(s.span,{className:"pl-c1",children:"255"}),`;
`]}),e.exports.jsx(s.span,{className:"code-line line-number",line:"10",children:`};
`})]})}),e.exports.jsxs(s.p,{children:["Line 9 contains a default value. This allows you to omit the ",e.exports.jsx(s.code,{children:"a"})," value when using brace initialization, like so:"]}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:["RGBA red     = RGBA{",e.exports.jsx(s.span,{className:"pl-c1",children:"255"}),",",e.exports.jsx(s.span,{className:"pl-c1",children:"0"}),",",e.exports.jsx(s.span,{className:"pl-c1",children:"0"}),",",e.exports.jsx(s.span,{className:"pl-c1",children:"255"}),`};
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["RGBA alsoRed = RGBA{",e.exports.jsx(s.span,{className:"pl-c1",children:"255"}),",",e.exports.jsx(s.span,{className:"pl-c1",children:"0"}),",",e.exports.jsx(s.span,{className:"pl-c1",children:"0"}),`};
`]})]})})]}),`
`,e.exports.jsx(s.h3,{id:"an-array-of-structs",children:e.exports.jsx(s.a,{href:"#an-array-of-structs",children:"An Array Of Structs"})}),`
`,e.exports.jsx(s.p,{children:"We've already hinted at this, but to be very clear..."}),`
`,e.exports.jsx(s.div,{className:"success-callout callout",children:e.exports.jsxs(s.p,{children:["In CS 1230, we will use an ",e.exports.jsxs(s.strong,{children:["array of ",e.exports.jsx(s.code,{children:"RGBA"})," structs"]})," to represent our color canvas' data."]})}),`
`,e.exports.jsx(s.p,{children:"That said, there are at least two ways to store color canvas data. You may read about that below:"}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Array of Structs"}),e.exports.jsxs(s.p,{children:["Like ",e.exports.jsx(s.code,{children:"int"}),"s, ",e.exports.jsx(s.code,{children:"float"}),"s, and ",e.exports.jsx(s.code,{children:"char"}),"s, etc, ",e.exports.jsx(s.code,{children:"struct"}),"s can be put into an array. Arrays of structs are the more common way to represent color images, and they can be visualized as follows:"]}),e.exports.jsx(s.table,{children:e.exports.jsx(s.thead,{children:e.exports.jsxs(s.tr,{children:[e.exports.jsx(s.th,{children:"RGBA"}),e.exports.jsx(s.th,{children:"RGBA"}),e.exports.jsx(s.th,{children:"RGBA"}),e.exports.jsx(s.th,{children:"..."}),e.exports.jsx(s.th,{children:"RGBA"})]})})}),e.exports.jsxs(s.p,{children:["In code, you can define a ",e.exports.jsx(s.code,{children:"std::vector"})," of ",e.exports.jsx(s.code,{children:"RGBA"})," structs like this:"]}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsx(s.code,{className:"language-cpp code-highlight",children:e.exports.jsx(s.span,{className:"code-line",children:`std::vector<RBGA> rgbaArray;
`})})})]}),`
`,e.exports.jsxs("details",{children:[e.exports.jsx("summary",{children:"Struct of Arrays"}),e.exports.jsx(s.p,{children:"Structs of arrays are less common, but they are equally valid representations of color images:"}),e.exports.jsx(s.table,{children:e.exports.jsx(s.thead,{children:e.exports.jsxs(s.tr,{children:[e.exports.jsx(s.th,{children:"red"}),e.exports.jsx(s.th,{children:"red"}),e.exports.jsx(s.th,{children:"red"}),e.exports.jsx(s.th,{children:"..."}),e.exports.jsx(s.th,{children:"red"})]})})}),e.exports.jsx(s.table,{children:e.exports.jsx(s.thead,{children:e.exports.jsxs(s.tr,{children:[e.exports.jsx(s.th,{children:"green"}),e.exports.jsx(s.th,{children:"green"}),e.exports.jsx(s.th,{children:"green"}),e.exports.jsx(s.th,{children:"..."}),e.exports.jsx(s.th,{children:"green"})]})})}),e.exports.jsx(s.table,{children:e.exports.jsx(s.thead,{children:e.exports.jsxs(s.tr,{children:[e.exports.jsx(s.th,{children:"blue"}),e.exports.jsx(s.th,{children:"blue"}),e.exports.jsx(s.th,{children:"blue"}),e.exports.jsx(s.th,{children:"..."}),e.exports.jsx(s.th,{children:"blue"})]})})}),e.exports.jsx(s.table,{children:e.exports.jsx(s.thead,{children:e.exports.jsxs(s.tr,{children:[e.exports.jsx(s.th,{children:"alpha"}),e.exports.jsx(s.th,{children:"alpha"}),e.exports.jsx(s.th,{children:"alpha"}),e.exports.jsx(s.th,{children:"..."}),e.exports.jsx(s.th,{children:"alpha"})]})})}),e.exports.jsx(s.p,{children:"In code, you can define the canvas like this:"}),e.exports.jsx(s.pre,{className:"language-cpp",children:e.exports.jsxs(s.code,{className:"language-cpp code-highlight",children:[e.exports.jsxs(s.span,{className:"code-line",children:[e.exports.jsx(s.span,{className:"pl-k",children:"struct"})," ",e.exports.jsx(s.span,{className:"pl-en",children:"CanvasRGBA"}),` {
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["	std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"})," r[",e.exports.jsx(s.span,{className:"pl-c1",children:"100"}),"]; ",e.exports.jsx(s.span,{className:"pl-c",children:"// We're using C-style arrays here"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["	std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"})," g[",e.exports.jsx(s.span,{className:"pl-c1",children:"100"}),"]; ",e.exports.jsx(s.span,{className:"pl-c",children:"// for demonstration, even though"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["	std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"})," b[",e.exports.jsx(s.span,{className:"pl-c1",children:"100"}),"]; ",e.exports.jsx(s.span,{className:"pl-c",children:"// we generally don't recommend them"}),`
`]}),e.exports.jsxs(s.span,{className:"code-line",children:["	std::",e.exports.jsx(s.span,{className:"pl-c1",children:"uint8_t"})," a[",e.exports.jsx(s.span,{className:"pl-c1",children:"100"}),`];
`]}),e.exports.jsx(s.span,{className:"code-line",children:`};
`})]})}),e.exports.jsxs(s.p,{children:[e.exports.jsx(s.code,{children:"canvasRGBA.r[0]"})," represents the zeroth pixel's red value, ",e.exports.jsx(s.code,{children:"canvasRGBA.g[0]"})," represents its green value, and so on."]})]}),`
`,e.exports.jsxs(s.p,{children:["Even further reading: ",e.exports.jsx(s.a,{href:"https://www.geeksforgeeks.org/array-of-structures-vs-array-within-a-structure-in-c-and-cpp/",target:"_blank",rel:"noopener noreferrer",children:"array of structures vs array within a structure in C/C++"}),"."]}),`
`,e.exports.jsx(s.h3,{id:"a-colorful-canvas",children:e.exports.jsx(s.a,{href:"#a-colorful-canvas",children:"A Colorful Canvas"})}),`
`,e.exports.jsx(s.p,{children:"Now, let's switch to a canvas that allows us to use colors!"}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["In the ",e.exports.jsx(s.code,{children:"ColorCanvas"})," class, implement the ",e.exports.jsx(s.code,{children:"initializeColorCanvas()"})," function. This function should make ",e.exports.jsx(s.code,{children:"m_canvasData"})," a ",e.exports.jsx(s.code,{children:"10 x 10"})," canvas and fill it with RGB color ",e.exports.jsx(s.code,{children:"(0, 123, 123)"}),"."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsx(s.li,{children:e.exports.jsxs(s.em,{children:["What type does ",e.exports.jsx(s.code,{children:"m_canvasData"})," have this time?"]})}),`
`,e.exports.jsx(s.li,{children:e.exports.jsxs(s.strong,{children:["Your command line argument should now be: ",e.exports.jsx(s.code,{children:"color"}),"!"]})}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:"Your canvas should now look like this:"}),`
`,e.exports.jsx(r,{images:[{src:"/labs/lab2/canvas-color.png",alt:"Color canvas"}],targetWidth:"50%",figNumber:8,children:e.exports.jsxs(s.p,{children:["A canvas filled with a teal color, corresponding to RGB color ",e.exports.jsx(s.code,{children:"(0, 123, 123)"}),"."]})}),`
`,e.exports.jsx(s.h3,{id:"making-a-stamp",children:e.exports.jsx(s.a,{href:"#making-a-stamp",children:"Making A Stamp"})}),`
`,e.exports.jsxs(s.p,{children:["Remember when you modified each pixel one by one to draw a heart? ",e.exports.jsx(s.em,{children:"Good times, good times."})," This time, we'll make a stamp function and call it repeatedly instead."]}),`
`,e.exports.jsx(s.p,{children:"First, we will need a helper function to convert pixel positions to pixel indices."}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["In the ",e.exports.jsx(s.code,{children:"ColorCanvas"})," class, we have implemented a ",e.exports.jsx(s.strong,{children:e.exports.jsx(s.em,{children:"buggy"})})," ",e.exports.jsx(s.code,{children:"posToIndex()"})," function that converts an ",e.exports.jsx(s.code,{children:"(x, y)"})," position into an index. We have also written a visualizer that tests this function called ",e.exports.jsx(s.code,{children:"testPosToIndex()"}),"."]}),e.exports.jsxs(s.p,{children:["Uncomment ",e.exports.jsx(s.code,{children:"testPosToIndex()"})," in ",e.exports.jsx(s.code,{children:"initializeColorCanvas()"})," and run the program. Based on what you see on your canvas and the positions colored in ",e.exports.jsx(s.code,{children:"testPosToIndex()"}),", can you find what's wrong with ",e.exports.jsx(s.code,{children:"posToIndex()"}),"?"]}),e.exports.jsx(s.p,{children:e.exports.jsx(s.strong,{children:"Fix the bug and be prepared to explain what the bug was."})}),e.exports.jsxs(s.blockquote,{children:[`
`,e.exports.jsx(s.p,{children:"Note that the convention for pixel positions in CS1230 is:"}),`
`,e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:[e.exports.jsx(s.code,{children:"x"})," is the horizontal axis; ",e.exports.jsx(s.code,{children:"y"})," is the vertical axis."]}),`
`,e.exports.jsxs(s.li,{children:["Position ",e.exports.jsx(s.code,{children:"(0, 0)"})," is at the top-left corner."]}),`
`]}),`
`]})]}),`
`,e.exports.jsx(s.p,{children:"Now, let's get to making that stamp!"}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["In the ",e.exports.jsx(s.code,{children:"ColorCanvas"})," class, implement the ",e.exports.jsx(s.code,{children:"drawFlower()"})," function. This function should draw a flower centered on the input position (see ",e.exports.jsx(s.a,{href:"#figure-9",children:"figure 9"})," for an example of three such flowers)."]}),e.exports.jsx(r,{images:[{src:"/labs/lab2/flowers.png",alt:"Flowers"}],targetWidth:"50%",figNumber:9,figCaption:"Three flowers drawn on a color canvas."}),e.exports.jsxs(s.p,{children:["Call the stamp function a few times with different input positions in ",e.exports.jsx(s.code,{children:"initializeColorCanvas()"}),". ",e.exports.jsx(s.strong,{children:"Then, take a screenshot of your creation!"})]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsx(s.li,{children:"Feel free to make your flower any color you like."}),`
`,e.exports.jsxs(s.li,{children:["Naturally, you're going to want to use your ",e.exports.jsx(s.code,{children:"posToIndex()"})," function."]}),`
`,e.exports.jsx(s.li,{children:e.exports.jsx(s.strong,{children:"Don't forget to check for edge cases!"})}),`
`,e.exports.jsxs(s.li,{children:["As before, your command line argument should be: ",e.exports.jsx(s.code,{children:"color"}),"."]}),`
`]})]}),`
`,e.exports.jsx(s.h2,{id:"the-pencil-tool",children:e.exports.jsx(s.a,{href:"#the-pencil-tool",children:"The Pencil Tool"})}),`
`,e.exports.jsxs(s.p,{children:["Hope you had fun with that! For the last part of this lab, instead of modifying our canvas in code, we're going to try to modify it ",e.exports.jsx(s.strong,{children:"interactively"})," with a Photoshop-like pencil."]}),`
`,e.exports.jsx(s.h3,{id:"for-your-info-event-handlers",children:e.exports.jsx(s.a,{href:"#for-your-info-event-handlers",children:"For Your Info: Event Handlers"})}),`
`,e.exports.jsxs(s.p,{children:["The key to implementing interactivity in most cases, Qt included, is using ",e.exports.jsx(s.em,{children:e.exports.jsx(s.strong,{children:"event handlers"})}),". These are functions that get called when an event is triggered, such as when a user presses down the left mouse button (LMB)."]}),`
`,e.exports.jsxs(s.p,{children:["In subsequent tasks, you will need to implement the event handlers found in ",e.exports.jsx(s.code,{children:"ColorCanvas"})," in order to make your canvas interactive. They are ",e.exports.jsx(s.code,{children:"mouseDown()"}),", ",e.exports.jsx(s.code,{children:"mouseMove()"}),", and ",e.exports.jsx(s.code,{children:"mouseUp()"}),", and they are called when the LMB is pressed down, the mouse is moved, and the LMB is released, respectively."]}),`
`,e.exports.jsx(s.h3,{id:"a-leaky-pencil",children:e.exports.jsx(s.a,{href:"#a-leaky-pencil",children:'A "Leaky" Pencil'})}),`
`,e.exports.jsx(s.p,{children:`First, we'll implement a "leaky" pencil that draws wherever the mouse touches:`}),`
`,e.exports.jsx(r,{images:[{src:"/labs/lab2/pencil-leaky.gif",alt:"Leaky Pencil"}],targetWidth:"50%",figNumber:10,figCaption:'A "leaky" pencil.'}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["Fill in the ",e.exports.jsx(s.code,{children:"mouseMove()"})," function in the ",e.exports.jsx(s.code,{children:"ColorCanvas"})," class."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:["Feel free to choose the color of your pencil by changing the RGBA value of ",e.exports.jsx(s.code,{children:"m_pencilColor"})," in ",e.exports.jsx(s.code,{children:"ColorCanvas.h"}),"."]}),`
`,e.exports.jsx(s.li,{children:"Each pixel that your mouse hovers over should have its color set to the pencil color."}),`
`,e.exports.jsx(s.li,{children:e.exports.jsxs(s.strong,{children:["Be sure to check that the input ",e.exports.jsx(s.code,{children:"(x, y)"})," coordinate is within the bounds of the canvas."]})}),`
`,e.exports.jsxs(s.li,{children:["As before, your command line argument should be: ",e.exports.jsx(s.code,{children:"color"}),"."]}),`
`]})]}),`
`,e.exports.jsx(s.h4,{id:"proper-pencil",children:e.exports.jsx(s.a,{href:"#proper-pencil",children:"Proper Pencil"})}),`
`,e.exports.jsx(s.p,{children:"Then, we'll implement a proper pencil which only draws when the left mouse button is held down:"}),`
`,e.exports.jsx(r,{images:[{src:"/labs/lab2/pencil-proper.gif",alt:"Proper Pencil"}],targetWidth:"50%",figNumber:11,figCaption:"A proper pencil."}),`
`,e.exports.jsxs(s.div,{className:"task-callout callout",children:[e.exports.jsxs(s.p,{children:["To implement the proper pencil, implement the ",e.exports.jsx(s.code,{children:"mouseDown()"})," and ",e.exports.jsx(s.code,{children:"mouseUp()"})," functions and modify the ",e.exports.jsx(s.code,{children:"mouseMove()"})," function in the ",e.exports.jsx(s.code,{children:"ColorCanvas"})," class."]}),e.exports.jsxs(s.ul,{children:[`
`,e.exports.jsxs(s.li,{children:["Ensure the pencil applies color ",e.exports.jsx(s.em,{children:"only"})," when the LMB is held down. Tip: set and use ",e.exports.jsx(s.code,{children:"m_isDown"}),"."]}),`
`,e.exports.jsxs(s.li,{children:["Make sure the pencil works even when the mouse is clicked once without being dragged (i.e., ",e.exports.jsx(s.code,{children:"mouseDown()"})," is called but not ",e.exports.jsx(s.code,{children:"mouseMove()"}),")."]}),`
`,e.exports.jsx(s.li,{children:e.exports.jsxs(s.strong,{children:["Be sure to check that the input ",e.exports.jsx(s.code,{children:"(x, y)"})," coordinate is within the bounds of the canvas."]})}),`
`,e.exports.jsxs(s.li,{children:["As before, your command line argument should be: ",e.exports.jsx(s.code,{children:"color"}),"."]}),`
`]})]}),`
`,e.exports.jsx(s.h2,{id:"end",children:e.exports.jsx(s.a,{href:"#end",children:"End"})}),`
`,e.exports.jsx(s.p,{children:"Congrats on finishing the Pencils lab! Now, it's time to submit your code and get checked off by a TA. Be prepared to show the TA your 2 screenshots (from tasks 5 (heart) and 8 (flowers)), explain what the bug was from task 7, and your pencil."}),`
`,e.exports.jsx(s.h2,{id:"submission",children:e.exports.jsx(s.a,{href:"#submission",children:"Submission"})}),`
`,e.exports.jsxs(s.p,{children:['Submit your GitHub link and commit ID to the "Lab 2: Pencils" assignment on Gradescope, ',e.exports.jsx(s.strong,{children:"then get checked off by a TA at hours"}),"."]}),`
`,e.exports.jsxs(s.p,{children:["Reference the GitHub + Gradescope Guide ",e.exports.jsx(s.a,{href:"/docs/github-gradescope-guide#handing-in-assignments",children:"here"}),"."]}),`
`,e.exports.jsx(i,{}),e.exports.jsx(s.style,{children:`
mjx-container[jax="SVG"] {
  direction: ltr;
}

mjx-container[jax="SVG"] > svg {
  overflow: visible;
  min-height: 1px;
  min-width: 1px;
}

mjx-container[jax="SVG"] > svg a {
  fill: blue;
  stroke: blue;
}

mjx-container[jax="SVG"][display="true"] {
  display: block;
  text-align: center;
  margin: 1em 0;
}

mjx-container[jax="SVG"][display="true"][width="full"] {
  display: flex;
}

mjx-container[jax="SVG"][justify="left"] {
  text-align: left;
}

mjx-container[jax="SVG"][justify="right"] {
  text-align: right;
}

g[data-mml-node="merror"] > g {
  fill: red;
  stroke: red;
}

g[data-mml-node="merror"] > rect[data-background] {
  fill: yellow;
  stroke: none;
}

g[data-mml-node="mtable"] > line[data-line], svg[data-table] > g > line[data-line] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {
  stroke-dasharray: 140;
}

g[data-mml-node="mtable"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {
  stroke-linecap: round;
  stroke-dasharray: 0,140;
}

g[data-mml-node="mtable"] > g > svg {
  overflow: visible;
}

[jax="SVG"] mjx-tool {
  display: inline-block;
  position: relative;
  width: 0;
  height: 0;
}

[jax="SVG"] mjx-tool > mjx-tip {
  position: absolute;
  top: 0;
  left: 0;
}

mjx-tool > mjx-tip {
  display: inline-block;
  padding: .2em;
  border: 1px solid #888;
  font-size: 70%;
  background-color: #F8F8F8;
  color: black;
  box-shadow: 2px 2px 5px #AAAAAA;
}

g[data-mml-node="maction"][data-toggle] {
  cursor: pointer;
}

mjx-status {
  display: block;
  position: fixed;
  left: 1em;
  bottom: 1em;
  min-width: 25%;
  padding: .2em .4em;
  border: 1px solid #888;
  font-size: 90%;
  background-color: #F8F8F8;
  color: black;
}

foreignObject[data-mjx-xml] {
  font-family: initial;
  line-height: normal;
  overflow: visible;
}

mjx-container[jax="SVG"] path[data-c], mjx-container[jax="SVG"] use[data-c] {
  stroke-width: 3;
}
`})]})]})}function h(t={}){const{wrapper:s}=t.components||{};return s?e.exports.jsx(s,Object.assign({},t,{children:e.exports.jsx(n,t)})):n(t)}export{h as default,x as documentProps};
